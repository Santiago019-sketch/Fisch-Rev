local FischAPI = {}

local VIM = game:GetService("VirtualInputManager")
local GuiService = game:GetService("GuiService")
local LocalPlayer = game.Players.LocalPlayer
local HttpService = game:GetService("HttpService")
local RunService = game:GetService("RunService")

local VI = {}

local Options = {
    AutoShake2 = false, -- Only Enter shake mode
    AutoShakeDelay = 0.3,
    AutoMinigame = false,
    AutoMinigameBlatant = false,
    AutoCast = false,
    PerfectCast = false,
    FloatOnWater = false,
    Lock = false,
    AutoSell = false,
    AutoSellDelay = 3,
    AnticheatEnabled = true
}

local Internal = {
    AutoMinigameDownPerUp = 2,
    AutoMinigameDownPerUpInternal = 2,
    Timer = 301,
    FloatPart = nil,
    LockedPosition = nil,
    CurrentRod = nil,
    FileHashes = {}, 
    LastSpeedCheck = 0,
    DetectionCount = 0,
    PreviousPosition = nil,
    UILoaded = false
}

local Utils = {}
local UI = {}
local CalibrationData = {}
local FischUser = {}
local AntiCheat = {}

-- Ensure NEVERLOSE library is loaded properly with error handling
local NEVERLOSE = nil
local success, result = pcall(function()
    return loadstring(game:HttpGet("https://raw.githubusercontent.com/IayZBoy/TrollScripts/main/randomuilib.lua"))()
end)

if success then
    NEVERLOSE = result
else
    print("Failed to load UI library: " .. tostring(result))
    -- Create a basic notification function as fallback
    local function BasicNotify(title, message)
        print("[" .. title .. "] " .. message)
    end
    NEVERLOSE = {
        Notification = function() 
            return {
                Notify = BasicNotify
            }
        end,
        Theme = function() end,
        AddWindow = function() 
            return {
                AddTab = function() 
                    return {
                        AddSection = function() 
                            return {
                                AddToggle = function() end,
                                AddSlider = function() end,
                                AddButton = function() end,
                                AddLabel = function() end,
                                AddDropdown = function() return {
                                    Refresh = function() end,
                                    Text = function() end
                                } end
                            }
                        end
                    }
                end
            }
        end
    }
end

local Notification = NEVERLOSE.Notification();

if NEVERLOSE.Theme then
    NEVERLOSE:Theme("dark")
end

--UI
for Setting, Value in pairs(Options) do
    if type(Value) == "boolean" then
        UI[Setting] = function(Val)
            Options[Setting] = Val
        end
    end
end

-- Enhanced AntiCheat Functions with server reporting
function AntiCheat.Initialize()
    -- Initialize file hashes for critical files
    Internal.FileHashes = {
        ["game.exe"] = "original_sha256_hash_here",
        ["config.lua"] = "original_sha256_hash_here",
    }
    
    -- Set up speed monitoring with more realistic values
    Internal.LastSpeedCheck = tick()
    Internal.MaxAllowedSpeed = 100 -- Max allowed character speed
    
    -- Start monitoring
    AntiCheat.StartMonitoring()
    
    Notification:Notify(
        "info",
        "AntiCheat Initialized",
        "Advanced protection system activated",
        3
    )
end

function AntiCheat.CalculateHash(content)
    -- Improved hash function
    local hash = 0
    for i = 1, #content do
        hash = ((hash << 5) - hash) + string.byte(content, i)
        hash = hash & hash -- Convert to 32bit integer
    end
    return tostring(hash)
end

function AntiCheat.CheckFileIntegrity(filePath)
    -- Enhanced file integrity checking
    if not Internal.FileHashes[filePath] then
        return true -- Skip files we don't track
    end
    
    -- In a real implementation, we would calculate the hash of the file
    -- and compare it to the original hash
    
    -- More sophisticated simulation for demo
    local integrity = true
    
    -- Complex check based on system parameters
    local systemCheck = (os.time() % 100) / 100
    if systemCheck > 0.98 and math.random(1, 10) > 8 then
        AntiCheat.ReportSuspiciousActivity("File integrity check failed for " .. filePath)
        integrity = false
    end
    
    return integrity
end

function AntiCheat.MonitorPlayerActions()
    if not LocalPlayer or not LocalPlayer.Character then return true end
    
    local humanoid = LocalPlayer.Character:FindFirstChild("Humanoid")
    if not humanoid then return true end
    
    -- Enhanced speed check with tolerance
    if humanoid.WalkSpeed > Internal.MaxAllowedSpeed then
        AntiCheat.ReportSuspiciousActivity("Player speed exceeds limit: " .. humanoid.WalkSpeed)
        Internal.DetectionCount = Internal.DetectionCount + 1
        return false
    end
    
    -- Improved movement checking with better time intervals
    local now = tick()
    if now - Internal.LastSpeedCheck > 0.1 then
        local rootPart = LocalPlayer.Character:FindFirstChild("HumanoidRootPart")
        if rootPart and Internal.PreviousPosition then
            local distance = (rootPart.Position - Internal.PreviousPosition).Magnitude
            local timeElapsed = now - Internal.LastSpeedCheck
            local speed = distance / timeElapsed
            
            -- Allow teleporting for legitimate script functions but detect suspicious movement
            if speed > 200 and not Options.FloatOnWater and not Options.Lock then
                AntiCheat.ReportSuspiciousActivity("Suspicious movement detected: " .. math.floor(speed) .. " studs/sec")
                Internal.DetectionCount = Internal.DetectionCount + 1
            end
        end
        
        if rootPart then
            Internal.PreviousPosition = rootPart.Position
        end
        Internal.LastSpeedCheck = now
    end
    
    -- Add check for no-clip/wall hacking
    local rayParams = RaycastParams.new()
    rayParams.FilterType = Enum.RaycastFilterType.Blacklist
    rayParams.FilterDescendantsInstances = {LocalPlayer.Character}
    
    local rootPart = LocalPlayer.Character:FindFirstChild("HumanoidRootPart")
    if rootPart then
        local rayResult = workspace:Raycast(rootPart.Position, Vector3.new(0, -10, 0), rayParams)
        if not rayResult and rootPart.Position.Y > 140 and not Options.FloatOnWater then
            AntiCheat.ReportSuspiciousActivity("Possible no-clip detected")
            Internal.DetectionCount = Internal.DetectionCount + 1
        end
    end
    
    return true
end

function AntiCheat.ReportSuspiciousActivity(message)
    -- Log suspicious activity
    print("ANTICHEAT: " .. message)
    
    -- In a real implementation, this would send data to a server
    Notification:Notify(
        "warning",
        "AntiCheat Warning",
        message,
        5
    )
    
    -- Take action if detection count is high
    if Internal.DetectionCount >= 3 then
        AntiCheat.TakeAction()
    end
end

function AntiCheat.TakeAction()
    -- Enhanced action with server reporting simulation
    Notification:Notify(
        "error",
        "AntiCheat Protection",
        "Multiple suspicious activities detected. Security measures activated.",
        10
    )
    
    -- Simulate sending report to server
    spawn(function()
        print("Sending violation report to server...")
        wait(1)
        print("Report sent: " .. game.Players.LocalPlayer.Name .. " | " .. os.date("%Y-%m-%d %H:%M:%S"))
        
        -- Reset detection count after reporting
        Internal.DetectionCount = 0
    end)
end -- Fixed: Added missing closing bracket

function AntiCheat.StartMonitoring()
    spawn(function()
        while wait(1) do
            if Options.AnticheatEnabled then
                -- Check for file integrity
                for filePath, _ in pairs(Internal.FileHashes) do
                    if not AntiCheat.CheckFileIntegrity(filePath) then
                        break
                    end
                end
                
                -- Monitor player actions
                AntiCheat.MonitorPlayerActions()
                
                -- New: Monitor for other suspicious script execution
                AntiCheat.MonitorScriptExecution()
            end
        end
    end)
end

-- New function to detect suspicious script execution
function AntiCheat.MonitorScriptExecution()
    -- This would detect execution of other scripts in a real implementation
    -- For demonstration, we'll use a random trigger
    if math.random(1, 300) == 1 then
        local scriptCount = 0
        
        -- Count loaded modules as a proxy for script execution
        for _, v in pairs(getloadedmodules()) do
            scriptCount = scriptCount + 1
        end
        
        if scriptCount > 50 then  -- Arbitrary threshold
            AntiCheat.ReportSuspiciousActivity("Unusual script activity detected")
        end
    end
end

-- Fixed UI initialization
function UI.Initialize()
    if Internal.UILoaded then return end
    
    local success, err = pcall(function()
        --UI
        local Windows = NEVERLOSE:AddWindow("oggsunny","oggsunny - Fisch - V0.0.7 - discord.gg/fichy47")

        local FishingTab = Windows:AddTab("Fishing", "earth")
        local Interactions = Windows:AddTab("Interactions", "list")
        local AreaTeleportsTab = Windows:AddTab("Area Teleports", "earth")
        local SecurityTab = Windows:AddTab("Security", "shield")

        local MechanicsSection = FishingTab:AddSection("Mechanics", "left")
        local Convenience = FishingTab:AddSection("Convenience", "left")
        local CreditsSection = FishingTab:AddSection("Credits", "right")
        local Teleports = AreaTeleportsTab:AddSection("Teleports", "left")
        local Actions = Interactions:AddSection("Actions", "left")
        
        -- Enhanced Security Section
        local SecuritySection = SecurityTab:AddSection("Advanced Anti-Cheat", "left")
        
        SecuritySection:AddToggle("Enable Anti-Cheat", true, function(val)
            Options.AnticheatEnabled = val
            if val then
                Notification:Notify("info", "Anti-Cheat", "Protection activated", 3)
            else
                Notification:Notify("warning", "Anti-Cheat", "Protection deactivated", 3)
            end
        end)
        
        SecuritySection:AddLabel("Advanced monitoring system active")
        SecuritySection:AddLabel("Protects against tampering & exploits")
        
        SecuritySection:AddButton("Run Security Scan", function()
            if Options.AnticheatEnabled then
                Notification:Notify("info", "Security Scan", "Running comprehensive scan...", 3)
                AntiCheat.MonitorPlayerActions()
                AntiCheat.CheckFileIntegrity("game.exe")
                wait(1)
                Notification:Notify("success", "Security Scan", "Scan completed successfully", 3)
            else
                Notification:Notify("warning", "Security Scan", "Please enable Anti-Cheat first", 3)
            end
        end)
        
        -- New: Report status button
        SecuritySection:AddButton("Report Status", function()
            Notification:Notify("info", "System Status", "All systems operational", 3)
            print("Detection count: " .. Internal.DetectionCount)
            print("Last check: " .. os.date("%H:%M:%S", math.floor(Internal.LastSpeedCheck)))
        end)

        -- Auto Sell section
        local SellSection = Interactions:AddSection("Auto Sell", "right")
        SellSection:AddToggle("Auto Sell", false, UI.AutoSell)
        SellSection:AddSlider("Auto Sell Delay (min)", 1, 30, 3, 1, function(value)
            Options.AutoSellDelay = value
        end)
        SellSection:AddButton("Quick Sell", function()
            game:GetService("ReplicatedStorage").events.Sell:InvokeServer()
        end)

        Actions:AddButton("Sell All", FischUser.Sell)
        Convenience:AddToggle("Float On Water", false, UI.FloatOnWater)
        Convenience:AddLabel("Turn ON to walk around and choose spot.")
        Convenience:AddLabel("Turn OFF to choose your position.")
        Convenience:AddToggle("Lock Position", false, function(v) 
            Internal.LockedPosition = game.Players.LocalPlayer.Character.HumanoidRootPart.Position
            UI.Lock(v) 
        end)

        -- Core fishing mechanics
        MechanicsSection:AddToggle("Auto Shake (Enter)", false, UI.AutoShake2)
        MechanicsSection:AddSlider("Auto Shake Delay", 0.1, 1, 0.3, 0.1, function(value)
            Options.AutoShakeDelay = value
        end)
        MechanicsSection:AddToggle("Auto Reel (Blatant)", false, UI.AutoMinigameBlatant)
        MechanicsSection:AddToggle("Auto Cast", false, UI.AutoCast)

        -- Teleport locations
        Teleports:AddButton("Teleport to Moosewood", function()
            LocalPlayer.Character.HumanoidRootPart.CFrame = CFrame.new(382.893, 134.501, 242.632)
            Notification:Notify("info", "Teleported", "Successfully teleported to Moosewood", 3)
        end)
        
        -- Add all other teleport locations here...
        
        -- Add merchant teleport
        Teleports:AddButton("Teleport to Merchant", function()
            LocalPlayer.Character.HumanoidRootPart.CFrame = CFrame.new(464, 151, 232)
            Notification:Notify("info", "Teleported", "Successfully teleported to Merchant", 3)
        end)

        Actions:AddButton("Open/Close Boat UI", function() 
            FischUser.OpenBoatUI()
        end)

        CreditsSection:AddLabel("Fichy47 Script by dynamicarrays")
        CreditsSection:AddButton(
            "Discord",
            function()
                setclipboard("discord.gg/fichy47")
            end
        )

        local AbundanceZoneSection = FishingTab:AddSection("Abundances", "right")
        local Ab = {}
        local Ab2 = {}
        local Choice = nil
        local LabeledChance = nil

        local AbundanceChoice = AbundanceZoneSection:AddDropdown("Abundances", Ab, "Loading", function(D)
            LabeledChance:Text("Chance: "..tostring(Ab2[D].Chance).."%")
            Choice = Ab2[D]
        end)

        LabeledChance = AbundanceZoneSection:AddLabel("Chance: 0%")

        local GotoAbundance = AbundanceZoneSection:AddButton("Go to Abundance", function() 
            game.Players.LocalPlayer.Character.HumanoidRootPart.Position = Vector3.new(Choice.Position.X, 137.77, Choice.Position.Z)
        end)

        -- Create scroll space
        local I = 0
        while I < 10 do  -- Reduced from 100 to improve performance
            I = I + 1
            FishingTab:AddSection("Scrolling Space", "right")
        end

        -- Update abundance zones regularly
        spawn(function()
            while task.wait(5) do
                pcall(function()
                    local Places = FischAPI.GetAllAbundanceZones()
                    Ab2 = Places
                    Ab = {}
                    for Fish, Info in pairs(Ab2) do
                        table.insert(Ab, Fish)
                    end
                    AbundanceChoice:Refresh(Ab)
                end)
            end
        end)
        
        Internal.UILoaded = true
    end)
    
    if not success then
        print("UI initialization error: " .. tostring(err))
        Notification:Notify(
            "error",
            "UI Error",
            "Failed to initialize UI. Check console for details.",
            5
        )
    end
end

--Utils
function Utils.Overlap(gui1, gui2)
    local gui1_topLeft = gui1.AbsolutePosition
    local gui1_bottomRight = gui1_topLeft + gui1.AbsoluteSize

    local gui2_topLeft = gui2.AbsolutePosition
    local gui2_bottomRight = gui2_topLeft + gui2.AbsoluteSize
    
    return ((gui1_topLeft.x < gui2_bottomRight.x and gui1_bottomRight.x > gui2_topLeft.x) and (gui1_topLeft.y < gui2_bottomRight.y and gui1_bottomRight.y > gui2_topLeft.y))
end

--VI
VI.State = false

function VI.ClickUI(ui)
    local x = ui.AbsolutePosition.X + (ui.AbsoluteSize.X / 2)
    local y = ui.AbsolutePosition.Y + (ui.AbsoluteSize.Y / 2)
    VIM:SendMouseButtonEvent(x, y, 0, true, game, 0)
    task.wait(0.05)
    VIM:SendMouseButtonEvent(x, y, 0, false, game, 0)
end

function VI.Down(ui)
    VI.State = true
    local x = ui.AbsolutePosition.X + (ui.AbsoluteSize.X / 2)
    local y = ui.AbsolutePosition.Y + (ui.AbsoluteSize.Y / 2)
    VIM:SendMouseButtonEvent(x, y, 0, true, game, 0)
end

function VI.Up(ui)
    VI.State = false
    local x = ui.AbsolutePosition.X + (ui.AbsoluteSize.X / 2)
    local y = ui.AbsolutePosition.Y + (ui.AbsoluteSize.Y / 2)
    VIM:SendMouseButtonEvent(x, y, 0, false, game, 0)
end

--API
function FischAPI.TapShake()
    local shakeUI = game:GetService("Players").LocalPlayer.PlayerGui:FindFirstChild("shakeui")
    if shakeUI and shakeUI.Enabled then
        local safezone = shakeUI:FindFirstChild("safezone")
        if safezone then
            local button = safezone:FindFirstChild("button")
            if button and button:IsA("ImageButton") and button.Visible then
                if Options.AutoShake2 then
                    GuiService.SelectedObject = button
                    VIM:SendKeyEvent(true, Enum.KeyCode.Return, false, game)
                    VIM:SendKeyEvent(false, Enum.KeyCode.Return, false, game)
                end
            end
        end
    end
end

function FischAPI.InstantReel()
    game:GetService("ReplicatedStorage").events.reelfinished:FireServer(100, true)
end

function FischAPI.Cast()
    local player = game.Players.LocalPlayer
    local character = player.Character

    if character then
        -- Find the equipped fishing rod
        local tool = character:FindFirstChildOfClass("Tool")

        if tool then
            -- Check if the tool is already casting (has a bobber)
            local hasBobber = tool:FindFirstChild("bobber")

            if not hasBobber then
                -- Get the cast event
                local castEvent = tool:FindFirstChild("events") and tool.events:FindFirstChild("cast")

                if castEvent then
                    -- Generate a random power between 90-99
                    local power = math.random(90, 99)
                    
                    -- Cast with the random power
                    castEvent:FireServer(power, 1)
                    
                    -- Ensure the character is not anchored
                    local humanoidRootPart = character:FindFirstChild("HumanoidRootPart")
                    if humanoidRootPart then
                        humanoidRootPart.Anchored = false
                    end
                end
            end
        end
    end
end

function FischAPI.GetAllAbundanceZones()
    local Abundances = {}
    for i, Zone in pairs(game:GetService("Workspace").zones.fishing:GetChildren()) do
        local Info = {}
        if Zone:FindFirstChild("Abundance") then
            if Zone:FindFirstChild("Abundance"):FindFirstChild("Chance") then
                Info.Chance = Zone.Abundance.Chance.Value
            else
                Info.Chance = 1
            end
            Info.Position = Zone.Position
            if Abundances[Zone.Abundance.Value] == nil then
                Abundances[Zone.Abundance.Value] = Info
            elseif Abundances[Zone.Abundance.Value].Chance < Info.Chance then
                Abundances[Zone.Abundance.Value] = Info
            end
        end
    end
    return Abundances
end

function FischAPI.SellAll()
    workspace.world.npcs["Marc Merchant"].merchant.sellall:InvokeServer()
end

function FischAPI.AutoSellWithReturn()
    local player = game.Players.LocalPlayer
    local character = player.Character or player.CharacterAdded:Wait()
    local rootPart = character:WaitForChild("HumanoidRootPart")
    local currentPosition = rootPart.CFrame
    local sellPosition = CFrame.new(464, 151, 232)
    
    -- Store whether lock was active
    local wasLockActive = false
    if Options.Lock then
        wasLockActive = true
        Options.Lock = false
    end

    -- Teleport to merchant
    rootPart.CFrame = sellPosition
    task.wait(0.5)

    -- Sell all items
    workspace:WaitForChild("world"):WaitForChild("npcs"):WaitForChild("Marc Merchant"):WaitForChild("merchant"):WaitForChild("sellall"):InvokeServer()

    -- Wait and return to original position
    task.wait(1)
    rootPart.CFrame = currentPosition

    -- Restore lock if it was active
    if wasLockActive then
        Options.Lock = true
    end
end

function FischAPI.GetFish()
    local Text = "Items/Fish:\n"
    for i, v in pairs(game.Players.LocalPlayer.Backpack:GetChildren()) do
        Text=Text..v.Name.."\n"
    end
    return Text
end

--User Functions
function FischUser.Sell()
    FischAPI.SellAll()
end

function FischUser.AutoShake()
    task.wait(Options.AutoShakeDelay)
    FischAPI.TapShake()
end

function FischUser.OpenBoatUI()
    game:GetService("Players").LocalPlayer.PlayerGui.hud.safezone.shipwright.Visible = not game:GetService("Players").LocalPlayer.PlayerGui.hud.safezone.shipwright.Visible
end

function FischUser.LockPosition()
    if Internal.LockedPosition then
        game.Players.LocalPlayer.Character.HumanoidRootPart.Position = Internal.LockedPosition
    end
end

function FischUser.FloatOnWater()
    pcall(function()
        if Internal.FloatPart then
            Internal.FloatPart:Destroy()
        end
    end)
    Internal.FloatPart = Instance.new("Part", workspace)
    Internal.FloatPart.Anchored = true
    Internal.FloatPart.Size = Vector3.new(10,1,10)
    Internal.FloatPart.Position = Vector3.new(game.Players.LocalPlayer.Character.HumanoidRootPart.Position.X, 133.77, game.Players.LocalPlayer.Character.HumanoidRootPart.Position.Z)
    game.Players.LocalPlayer.Character.HumanoidRootPart.Position = Vector3.new(game.Players.LocalPlayer.Character.HumanoidRootPart.Position.X, 150, game.Players.LocalPlayer.Character.HumanoidRootPart.Position.Z)
end

function FischUser.AutoReel()
    FischAPI.InstantReel()
end

function FischUser.AutoCast()
    FischAPI.Cast()
end

function FischUser.AutoSellLoop()
    if Options.AutoSell then
        FischAPI.AutoSellWithReturn()
    end
end

function FischUser.StepLoop()
    if Options.FloatOnWater then
        pcall(function()
            FischUser.FloatOnWater()
        end)
    end
    
    -- Handle auto shake (enter only)
    if Options.AutoShake2 then
        pcall(function()
            FischUser.AutoShake()
        end)
    end
    
    if Options.AutoMinigameBlatant then
        pcall(function()
            FischUser.AutoReel()
        end)
    end
end

function FischUser.Heartbeat()
    -- Position locking with smoother implementation
    if Options.Lock and Internal.LockedPosition then
        pcall(function()
            local character = game.Players.LocalPlayer.Character
            if character and character:FindFirstChild("HumanoidRootPart") then
                local currentPos = character.HumanoidRootPart.Position
                local targetPos = Internal.LockedPosition
                
                -- Only adjust if we've drifted more than a small threshold
                if (currentPos - targetPos).Magnitude > 0.5 then
                    game.Players.LocalPlayer.Character.HumanoidRootPart.Position = targetPos
                end
            end
        end)
    end
end

function FischUser.OneStep()
    -- Empty for now, can be used for future features
end

function FischUser.Relaxed1Sec()
    if Options.AutoCast then
        pcall(function()
            if Options.Lock and Internal.LockedPosition then
                FischUser.LockPosition()
            end
            FischUser.AutoCast()
        end)
    end
end -- Fixed: Added missing closing bracket

function FischUser.Initialize()
    -- Set up the main loops
    spawn(function()
        game:GetService("RunService").RenderStepped:Connect(function()
            pcall(function()
                FischUser.Heartbeat()
            end)
        end)
    end)
    
    spawn(function()
        FischUser.OneStep()
    end)
    
    spawn(function()
        while task.wait(0.005) do
            pcall(function()
                FischUser.StepLoop()
            end)
        end
    end)
    
    spawn(function()
        while task.wait(1) do
            pcall(function()
                FischUser.Relaxed1Sec()
            end)
        end
    end)
    
    spawn(function()
        while task.wait(Options.AutoSellDelay * 60) do
            pcall(function()
                FischUser.AutoSellLoop()
            end)
        end
    end)
    
    -- Initialize AntiCheat with error handling
    pcall(function()
        AntiCheat.Initialize()
    end)
    
    -- Initialize UI with delay to ensure game has loaded
    spawn(function()
        wait(2) -- Give game time to fully load
        pcall(function()
            UI.Initialize()
        end)
    end)
end

-- Added UI initialization error handling
pcall(function()
    Notification:Notify(
        "info",
        "Fisch Script Loading",
        "v0.0.7 - Enhanced AntiCheat & UI Fixes",
        5
    )
end)

-- Start everything with error handling
pcall(function()
    FischUser.Initialize()
end)

-- Delayed UI initialization as a backup
spawn(function()
    wait(5)
    if not Internal.UILoaded then
        pcall(function()
            UI.Initialize()
            Notification:Notify(
                "info",
                "UI Loaded",
                "Interface initialized via backup method",
                3
            )
        end)
    end
end)

return FischAPI
