-- Load Fluent UI Library
local Fluent = loadstring(game:HttpGet("https://github.com/dawid-scripts/Fluent/releases/latest/download/main.lua"))()

-- Create Window
local Window = Fluent:CreateWindow({
    Title = "Ogsunny Hub V1.2.4",
    SubTitle = "Fishing Game",
    TabWidth = 160,
    Size = UDim2.fromOffset(580, 460),
    Acrylic = true,
    Theme = "Dark"
})

-- Tables
local teleportSpots = {}
local itemSpots = {
    Bait_Crate = CFrame.new(384.57513427734375, 135.3519287109375, 337.5340270996094),
    Carbon_Rod = CFrame.new(454.083618, 150.590073, 225.328827, 0.985374212, -0.170404434, 1.41561031e-07, 1.41561031e-07, 1.7285347e-06, 1, -0.170404434, -0.985374212, 1.7285347e-06),
    Crab_Cage = CFrame.new(474.803589, 149.664566, 229.49469, -0.721874595, 0, 0.692023814, 0, 1, 0, -0.692023814, 0, -0.721874595),
    Fast_Rod = CFrame.new(447.183563, 148.225739, 220.187454, 0.981104493, 1.26492232e-05, 0.193478703, -0.0522461236, 0.962867677, 0.264870107, -0.186291039, -0.269973755, 0.944674432),
    Flimsy_Rod = CFrame.new(471.107697, 148.36171, 229.642441, 0.841614008, 0.0774728209, -0.534493923, 0.00678436086, 0.988063335, 0.153898612, 0.540036798, -0.13314943, 0.831042409),
    GPS = CFrame.new(517.896729, 149.217636, 284.856842, 7.39097595e-06, -0.719539165, -0.694451928, -1, -7.39097595e-06, -3.01003456e-06, -3.01003456e-06, 0.694451928, -0.719539165),
    Long_Rod = CFrame.new(485.695038, 171.656326, 145.746109, -0.630167365, -0.776459217, -5.33461571e-06, 5.33461571e-06, -1.12056732e-05, 1, -0.776459217, 0.630167365, 1.12056732e-05),
    Lucky_Rod = CFrame.new(446.085999, 148.253006, 222.160004, 0.974526405, -0.22305499, 0.0233404674, 0.196993902, 0.901088715, 0.386306256, -0.107199371, -0.371867687, 0.922075212),
    Plastic_Rod = CFrame.new(454.425385, 148.169739, 229.172424, 0.951755166, 0.0709736273, -0.298537821, -3.42726707e-07, 0.972884834, 0.231290117, 0.306858391, -0.220131472, 0.925948203),
    Training_Rod = CFrame.new(457.693848, 148.357529, 230.414307, 1, -0, 0, 0, 0.975410998, 0.220393807, -0, -0.220393807, 0.975410998)
}

-- Services
local VirtualInputManager = game:GetService("VirtualInputManager")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local VirtualUser = game:GetService("VirtualUser")
local HttpService = game:GetService("HttpService")
local GuiService = game:GetService("GuiService")
local RunService = game:GetService("RunService")
local Workspace = game:GetService("Workspace")
local Players = game:GetService("Players")

-- Locals
local LocalPlayer = Players.LocalPlayer
local LocalCharacter = LocalPlayer.Character or LocalPlayer.CharacterAdded:Wait()
local HumanoidRootPart = LocalCharacter:WaitForChild("HumanoidRootPart")
local PlayerGUI = LocalPlayer:FindFirstChildOfClass("PlayerGui")
local RenderStepped = RunService.RenderStepped
local WaitForSomeone = RenderStepped.Wait

-- Try to find a folder with teleport spots
local TpSpotsFolder = workspace:FindFirstChild("TeleportSpots") or workspace:FindFirstChild("TpSpots")

-- If TpSpotsFolder doesn't exist, create a simple one with current location
if not TpSpotsFolder then
    TpSpotsFolder = Instance.new("Folder")
    TpSpotsFolder.Name = "TeleportSpots"
    TpSpotsFolder.Parent = workspace

    -- Add current location as a spot
    local currentSpot = Instance.new("Part")
    currentSpot.Name = "CurrentLocation"
    currentSpot.Anchored = true
    currentSpot.CanCollide = false
    currentSpot.Transparency = 1
    currentSpot.CFrame = HumanoidRootPart.CFrame
    currentSpot.Parent = TpSpotsFolder

    -- Add this to teleport spots
    table.insert(teleportSpots, "CurrentLocation")
end

-- Variables
local autoShake = false
local autoShakeDelay = 0.1
local autoShakeMethod = "KeyCodeEvent"
local autoReel = false
local autoReelDelay = 2
local autoCast = false
local autoCastMode = "Legit"
local autoCastDelay = 2
local Noclip = false

-- Create Tabs
local MainTab = Window:AddTab({Title = "Main", Icon = "activity"})
local TeleportsTab = Window:AddTab({Title = "Teleports", Icon = "map-pin"})
local AutomationTab = Window:AddTab({Title = "Automation", Icon = "robot"})
local UtilitiesTab = Window:AddTab({Title = "Utilities", Icon = "wrench"})
local SettingsTab = Window:AddTab({Title = "Settings", Icon = "settings"})

-- Fix for character references
LocalPlayer.CharacterAdded:Connect(function(Character)
    LocalCharacter = Character
    HumanoidRootPart = Character:WaitForChild("HumanoidRootPart")
end)

-- Function to setup character-specific connections
local autoCastConnection
function setupCharacterConnections()
    if autoCastConnection then autoCastConnection:Disconnect() end

    autoCastConnection = LocalCharacter.ChildAdded:Connect(function(child)
        if child:IsA("Tool") and child:FindFirstChild("events") and child.events:FindFirstChild("cast") ~= nil and autoCast then
            task.wait(autoCastDelay)
            if autoCastMode == "Legit" then
                VirtualInputManager:SendMouseButtonEvent(0, 0, 0, true, LocalPlayer, 0)
                HumanoidRootPart.ChildAdded:Connect(function()
                    if HumanoidRootPart:FindFirstChild("power") ~= nil and HumanoidRootPart.power.powerbar.bar ~= nil then
                        HumanoidRootPart.power.powerbar.bar.Changed:Connect(function(property)
                            if property == "Size" then
                                if HumanoidRootPart.power.powerbar.bar.Size == UDim2.new(1, 0, 1, 0) then
                                    VirtualInputManager:SendMouseButtonEvent(0, 0, 0, false, LocalPlayer, 0)
                                end
                            end
                        end)
                    end
                end)
            elseif autoCastMode == "Rage" then
                child.events.cast:FireServer(100)
            end
        end
    end)
end

-- GUI-related connections
local autoreelandshakeConnection
if autoreelandshakeConnection then autoreelandshakeConnection:Disconnect() end
autoreelandshakeConnection = PlayerGUI.ChildAdded:Connect(function(GUI)
    if GUI:IsA("ScreenGui") and GUI.Name == "shakeui" then
        if GUI:FindFirstChild("safezone") ~= nil then
            GUI.safezone.ChildAdded:Connect(function(child)
                if child:IsA("ImageButton") and child.Name == "button" then
                    if autoShake then
                        task.wait(autoShakeDelay)
                        if child.Visible then
                            if autoShakeMethod == "ClickEvent" then
                                local pos = child.AbsolutePosition
                                local size = child.AbsoluteSize
                                VirtualInputManager:SendMouseButtonEvent(pos.X + size.X / 2, pos.Y + size.Y / 2, 0, true, LocalPlayer, 0)
                                VirtualInputManager:SendMouseButtonEvent(pos.X + size.X / 2, pos.Y + size.Y / 2, 0, false, LocalPlayer, 0)
                            elseif autoShakeMethod == "KeyCodeEvent" then
                                while WaitForSomeone(RenderStepped) do
                                    if autoShake and GUI.safezone:FindFirstChild(child.Name) ~= nil then
                                        task.wait()
                                        pcall(function()
                                            GuiService.SelectedObject = child
                                            if GuiService.SelectedObject == child then
                                                VirtualInputManager:SendKeyEvent(true, Enum.KeyCode.Return, false, game)
                                                VirtualInputManager:SendKeyEvent(false, Enum.KeyCode.Return, false, game)
                                            end
                                        end)
                                    else
                                        GuiService.SelectedObject = nil
                                        break
                                    end
                                end
                            end
                        end
                    end
                end
            end)
        end
    end
    if GUI:IsA("ScreenGui") and GUI.Name == "reel" then
        if autoReel and ReplicatedStorage:WaitForChild("events"):WaitForChild("reelfinished") ~= nil then
            repeat task.wait(autoReelDelay) ReplicatedStorage.events.reelfinished:FireServer(100, false) until GUI == nil or GUI.Parent == nil
        end
    end
end)

local autoCastConnection2
if autoCastConnection2 then autoCastConnection2:Disconnect() end
autoCastConnection2 = PlayerGUI.ChildRemoved:Connect(function(GUI)
    if GUI.Name == "reel" then
        local Tool = LocalCharacter:FindFirstChildOfClass("Tool")
        if autoCast and Tool ~= nil and Tool:FindFirstChild("events") and Tool.events:FindFirstChild("cast") ~= nil then
            task.wait(autoCastDelay)
            if autoCastMode == "Legit" then
                VirtualInputManager:SendMouseButtonEvent(0, 0, 0, true, LocalPlayer, 0)
                HumanoidRootPart.ChildAdded:Connect(function()
                    if HumanoidRootPart:FindFirstChild("power") ~= nil and HumanoidRootPart.power.powerbar.bar ~= nil then
                        HumanoidRootPart.power.powerbar.bar.Changed:Connect(function(property)
                            if property == "Size" then
                                if HumanoidRootPart.power.powerbar.bar.Size == UDim2.new(1, 0, 1, 0) then
                                    VirtualInputManager:SendMouseButtonEvent(0, 0, 0, false, LocalPlayer, 0)
                                end
                            end
                        end)
                    end
                end)
            elseif autoCastMode == "Rage" then
                Tool.events.cast:FireServer(100)
            end
        end
    end
end)

-- Setup initial character connections
setupCharacterConnections()

-- Noclip
local NoclipConnection
if NoclipConnection then NoclipConnection:Disconnect() end
NoclipConnection = RunService.Stepped:Connect(function()
    if Noclip then
        if LocalCharacter ~= nil then
            for _, v in pairs(LocalCharacter:GetDescendants()) do
                if v:IsA("BasePart") and v.CanCollide then
                    v.CanCollide = false
                end
            end
        end
    end
end)

-- Populate teleport spots
for _, v in pairs(TpSpotsFolder:GetChildren()) do
    if not table.find(teleportSpots, v.Name) then
        table.insert(teleportSpots, v.Name)
    end
end

-- Create sections for Main Tab
local AutoShakeSection = MainTab:AddSection("Auto Shake")

-- Auto Shake Toggle
MainTab:AddToggle({
    Title = "Enable AutoShake",
    Default = false,
    Callback = function(Value)
        autoShake = Value
    end
})

-- Auto Shake Method Dropdown
MainTab:AddDropdown({
    Title = "AutoShake Method",
    Values = {"ClickEvent", "KeyCodeEvent"},
    Default = "KeyCodeEvent",
    Callback = function(Value)
        autoShakeMethod = Value
    end
})

-- Auto Shake Delay Slider
MainTab:AddSlider({
    Title = "AutoShake Delay",
    Min = 0,
    Max = 10,
    Default = 0.1,
    Precise = true,
    Decimals = 1,
    Callback = function(Value)
        autoShakeDelay = Value
    end
})

-- Auto Reel Section
local AutoReelSection = MainTab:AddSection("Auto Reel")

-- Auto Reel Toggle
MainTab:AddToggle({
    Title = "Enable AutoReel",
    Default = false,
    Callback = function(Value)
        autoReel = Value
    end
})

-- Auto Reel Delay Slider
MainTab:AddSlider({
    Title = "AutoReel Delay",
    Min = 0,
    Max = 10,
    Default = 2,
    Precise = true,
    Decimals = 1,
    Callback = function(Value)
        autoReelDelay = Value
    end
})

-- Auto Cast Section
local AutoCastSection = MainTab:AddSection("Auto Cast")

-- Auto Cast Toggle
MainTab:AddToggle({
    Title = "Enable AutoCast",
    Default = false,
    Callback = function(Value)
        autoCast = Value
        local Tool = LocalCharacter:FindFirstChildOfClass("Tool")
        if Tool and Tool:FindFirstChild("events") and Tool.events:FindFirstChild("cast") and Value then
            task.wait(autoCastDelay)
            if autoCastMode == "Legit" then
                VirtualInputManager:SendMouseButtonEvent(0, 0, 0, true, LocalPlayer, 0)
                HumanoidRootPart.ChildAdded:Connect(function()
                    if HumanoidRootPart:FindFirstChild("power") and HumanoidRootPart.power.powerbar.bar then
                        HumanoidRootPart.power.powerbar.bar.Changed:Connect(function(property)
                            if property == "Size" and HumanoidRootPart.power.powerbar.bar.Size == UDim2.new(1, 0, 1, 0) then
                                VirtualInputManager:SendMouseButtonEvent(0, 0, 0, false, LocalPlayer, 0)
                            end
                        end)
                    end
                end)
            elseif autoCastMode == "Rage" then
                Tool.events.cast:FireServer(100)
            end
        end
    end
})

-- Auto Cast Mode Dropdown
MainTab:AddDropdown({
    Title = "AutoCast Mode",
    Values = {"Legit", "Rage"},
    Default = "Legit",
    Callback = function(Value)
        autoCastMode = Value
    end
})

-- Auto Cast Delay Slider
MainTab:AddSlider({
    Title = "AutoCast Delay",
    Min = 0,
    Max = 10,
    Default = 2,
    Precise = true,
    Decimals = 1,
    Callback = function(Value)
        autoCastDelay = Value
    end
})

-- Utilities Section
local UtilitiesSection = MainTab:AddSection("Utilities")

-- Noclip Toggle
MainTab:AddToggle({
    Title = "Enable Noclip",
    Default = false,
    Callback = function(Value)
        Noclip = Value
    end
})

-- Teleports Tab Sections
local TeleportsSection = TeleportsTab:AddSection("Teleports")

-- Convert table keys to array for dropdown
local itemSpotList = {}
for key, _ in pairs(itemSpots) do
    table.insert(itemSpotList, key)
end

-- Teleport to Location Dropdown
TeleportsTab:AddDropdown({
    Title = "Teleport to Location",
    Values = teleportSpots,
    Callback = function(Value)
        if teleportSpots and HumanoidRootPart then
            HumanoidRootPart.CFrame = TpSpotsFolder:FindFirstChild(Value).CFrame + Vector3.new(0, 5, 0)
        end
    end
})

-- Teleport to Item Dropdown
TeleportsTab:AddDropdown({
    Title = "Teleport to Item",
    Values = itemSpotList,
    Callback = function(Value)
        if itemSpots and HumanoidRootPart then
            HumanoidRootPart.CFrame = itemSpots[Value]
        end
    end
})

-- Save Current Location Button
TeleportsTab:AddButton({
    Title = "Save Current Location",
    Callback = function()
        local spotName = "Spot_" .. #teleportSpots + 1

        local newSpot = Instance.new("Part")
        newSpot.Name = spotName
        newSpot.Anchored = true
        newSpot.CanCollide = false
        newSpot.Transparency = 1
        newSpot.CFrame = HumanoidRootPart.CFrame
        newSpot.Parent = TpSpotsFolder

        table.insert(teleportSpots, spotName)

        Fluent:Notify({
            Title = "Location Saved",
            Content = "Saved current location as " .. spotName,
            Duration = 3
        })
    end
})

-- Unload Script Button
MainTab:AddButton({
    Title = "Unload Script",
    Callback = function()
        -- Disconnect all connections
        if autoreelandshakeConnection then autoreelandshakeConnection:Disconnect() end
        if autoCastConnection then autoCastConnection:Disconnect() end
        if autoCastConnection2 then autoCastConnection2:Disconnect() end
        if NoclipConnection then NoclipConnection:Disconnect() end

        -- Remove GUI elements
        for _, v in pairs(PlayerGUI:GetChildren()) do
            if v:IsA("ScreenGui") and (v.Name == "shakeui" or v.Name == "reel") then
                v:Destroy()
            end
        end

        -- Unload the Fluent UI Library
        Window:Destroy()

        -- Notify the user
        Fluent:Notify({
            Title = "Script Unloaded",
            Content = "The script has been unloaded successfully.",
            Duration = 5
        })
    end
})

-- Initial notification
Fluent:Notify({
    Title = "Ogsunny Hub",
    Content = "Script loaded successfully! V1.2.4",
    Duration = 5
})

-- Automation Tab
local AutomationFishingGroup = AutomationTab:AddSection("Fishing")

-- Auto-cast Toggle
AutomationTab:AddToggle({
    Title = "Auto-cast",
    Default = false,
    Callback = function(Value)
        autoCast = Value
    end
})

-- Always perfect cast Toggle
AutomationTab:AddToggle({
    Title = "Always perfect [Server]",
    Default = false,
    Callback = function(Value)
        -- Implementation for perfect cast
    end
})

-- Instant bob Toggle
AutomationTab:AddToggle({
    Title = "Instant bob [Blatant]",
    Default = false,
    Callback = function(Value)
        -- Implementation for instant bob
    end
})

-- Auto-reel Toggle
AutomationTab:AddToggle({
    Title = "Auto-reel [Legit]",
    Default = false,
    Callback = function(Value)
        autoReel = Value
    end
})

-- Instant reel Toggle
AutomationTab:AddToggle({
    Title = "Insta-reel [Blatant]",
    Default = false,
    Callback = function(Value)
        -- Implementation for instant reel
    end
})

-- Always perfect reel Toggle
AutomationTab:AddToggle({
    Title = "Always perfect",
    Default = false,
    Callback = function(Value)
        -- Implementation for always perfect reel
    end
})

-- Auto shake Toggle
AutomationTab:AddToggle({
    Title = "Auto shake",
    Default = false,
    Callback = function(Value)
        autoShake = Value
    end
})

-- Center-shake Toggle
AutomationTab:AddToggle({
    Title = "Center-shake [Improves AutoShake]",
    Default = false,
    Callback = function(Value)
        -- Implementation for center-shake
    end
})

-- Teleports Group
local TeleportsGroupBox = AutomationTab:AddSection("Teleports")

-- Teleport locations Dropdown
AutomationTab:AddDropdown({
    Title = "Select location",
    Values = teleportSpots,
    Callback = function(Value)
        if teleportSpots and HumanoidRootPart then
            HumanoidRootPart.CFrame = TpSpotsFolder:FindFirstChild(Value).CFrame + Vector3.new(0, 5, 0)
        end
    end
})

-- Teleport Button
AutomationTab:AddButton({
    Title = "Teleport",
    Callback = function()
        local Selected = GetOptionValue("TeleportsDropdown")
        local Position = TeleportLocations[Selected]

        if Position then
            Utils.TP(Position)
        end
    end
})

-- Utilities Group
local UtilitiesGroupBox = UtilitiesTab:AddSection("Utilities")

-- Fish radar Toggle
UtilitiesTab:AddToggle({
    Title = "Fish radar",
    Default = false,
    Callback = function(Value)
        -- Implementation for fish radar
    end
})

-- Disable oxygen/temperature Toggle
UtilitiesTab:AddToggle({
    Title = "Disable oxygen/temperature",
    Default = false,
    Callback = function(Value)
        -- Implementation for disable oxygen/temperature
    end
})

-- Infinite oxygen Toggle
UtilitiesTab:AddToggle({
    Title = "Infinite oxygen [Water]",
    Default = false,
    Callback = function(Value)
        -- Implementation for infinite oxygen
    end
})

-- Anti-AFK Toggle
UtilitiesTab:AddToggle({
    Title = "Anti-AFK",
    Default = false,
    Callback = function(Value)
        -- Implementation for anti-AFK
    end
})

-- No fish models Toggle
UtilitiesTab:AddToggle({
    Title = "No fish models",
    Default = false,
    Callback = function(Value)
        -- Implementation for no fish models
    end
})

-- Disable rendering Toggle
UtilitiesTab:AddToggle({
    Title = "Disable rendering [+FPS]",
    Default = false,
    Callback = function(Value)
        RunService:Set3dRenderingEnabled(not Value)
    end
})

-- Disable custom inventory Toggle
UtilitiesTab:AddToggle({
    Title = "Disable custom inventory [+FPS]",
    Default = false,
    Callback = function(Value)
        local Inventory = WaitForTable(LocalPlayer.PlayerGui, { "hud", "safezone", "backpack" })
        if Inventory then
            Inventory.Visible = not Value
            StarterGui:SetCoreGuiEnabled(Enum.CoreGuiType.Backpack, Value)
        end
    end
})

-- Spam equipped tool Toggle
UtilitiesTab:AddToggle({
    Title = "Spam equipped tool",
    Default = false,
    Callback = function(Value)
        -- Implementation for spam equipped tool
    end
})

-- Remote Shop Group
local ShopGroupBox = UtilitiesTab:AddSection("Remote Shop")

-- Target item Dropdown
UtilitiesTab:AddDropdown({
    Title = "Target item",
    Values = {},
    Callback = function(Value)
        -- Implementation for target item
    end
})

-- Buy Item Button
UtilitiesTab:AddButton({
    Title = "Buy Item",
    Callback = function()
        -- Implementation for buy item
    end
})

-- Merlin Group
UtilitiesTab:AddSection("Merlin")

-- Item amount Slider
UtilitiesTab:AddSlider({
    Title = "Item amount",
    Min = 1,
    Max = 1000,
    Default = 1,
    Callback = function(Value)
        -- Implementation for item amount
    end
})

-- Buy Power Button
UtilitiesTab:AddButton({
    Title = "Buy Power",
    Callback = function()
        -- Implementation for buy power
    end
})

-- Buy Luck Button
UtilitiesTab:AddButton({
    Title = "Buy Luck",
    Callback = function()
        -- Implementation for buy luck
    end
})

-- Boat Group
local BoatGroupBox = UtilitiesTab:AddSection("Boat")

-- Select boat Dropdown
UtilitiesTab:AddDropdown({
    Title = "Select boat",
    Values = {},
    Callback = function(Value)
        -- Implementation for select boat
    end
})

-- Remote-Spawn Boat Button
UtilitiesTab:AddButton({
    Title = "Remote-Spawn Boat",
    Callback = function()
        -- Implementation for remote-spawn boat
    end
})

-- Settings Tab
local MenuGroup = SettingsTab:AddSection("Menu")

-- Unload Button
SettingsTab:AddButton({
    Title = "Unload",
    Callback = function()
        -- Disconnect all connections
        if autoreelandshakeConnection then autoreelandshakeConnection:Disconnect() end
        if autoCastConnection then autoCastConnection:Disconnect() end
        if autoCastConnection2 then autoCastConnection2:Disconnect() end
        if NoclipConnection then NoclipConnection:Disconnect() end

        -- Remove GUI elements
        for _, v in pairs(PlayerGUI:GetChildren()) do
            if v:IsA("ScreenGui") and (v.Name == "shakeui" or v.Name == "reel") then
                v:Destroy()
            end
        end

        -- Unload the Fluent UI Library
        Window:Destroy()

        -- Notify the user
        Fluent:Notify({
            Title = "Script Unloaded",
            Content = "The script has been unloaded successfully.",
            Duration = 5
        })
    end
})

-- Menu bind
MenuGroup:AddLabel("Menu bind")
    :AddKeyPicker("MenuKeybind", { Default = "RightControl", NoUI = true, Text = "Menu keybind" })

-- Rainbow UI Toggle
MenuGroup:AddToggle({
    Title = "Rainbow UI",
    Default = false,
    Callback = function(Value)
        -- Implementation for rainbow UI
    end
})

-- Custom Cursor Toggle
MenuGroup:AddToggle({
    Title = "Custom Cursor",
    Default = true,
    Callback = function(Value)
        Library.ShowCustomCursor = Value
    end
})

Library.ToggleKeybind = UI.Options.MenuKeybind
Library.ShowCustomCursor = UI.Toggles.ShowCustomCursor.Value

-- SaveManager and ThemeManager setup
ThemeManager:SetLibrary(Library)
SaveManager:SetLibrary(Library)

SaveManager:IgnoreThemeSettings()
SaveManager:SetIgnoreIndexes({ "MenuKeybind" })
ThemeManager:SetFolder("sasware_fisch")
SaveManager:SetFolder("sasware_fisch/main")

SaveManager:BuildConfigSection(SettingsTab)
ThemeManager:ApplyToTab(SettingsTab)

-- Initialization
Collect(RunService.RenderStepped:Connect(function()
    Library:SetWatermark("Current connections: " .. #Collection)
end))

-- Hooks and script modifications
if not NO_HOOKING then
    -- Implement hooks and modifications here
end

-- Start coroutines
coroutine.resume(ServerStressCoroutine)
coroutine.resume(AutoClickCoroutine)
coroutine.resume(AutoReelCoroutine)
coroutine.resume(AutoCastCoroutine)
coroutine.resume(ShopUpdateCoroutine)
Collect(ServerStressCoroutine)
Collect(AutoClickCoroutine)
Collect(AutoReelCoroutine)
Collect(AutoCastCoroutine)
Collect(ShopUpdateCoroutine)

Collect(LocalPlayer.CharacterAdded:Connect(Utils.CharacterAdded))
Collect(RunService.RenderStepped:Connect(function()
    if GetToggleValue("Rainbow") then
        Library.AccentColor = Library.CurrentRainbowColor
        Library:UpdateColorsUsingRegistry()
    end
end))

OnUnload.Event:Once(function()
    for _, PersistentModel in next, CollectionService:GetTagged("ForcePersistent") do
        if PersistentModel:GetAttribute("OldStreamingMode") then
            local OldStreamingMode = PersistentModel:GetAttribute("OldStreamingMode")
            PersistentModel.ModelStreamingMode = Enum.ModelStreamingMode[OldStreamingMode]
        else
            PersistentModel.ModelStreamingMode = Enum.ModelStreamingMode.Default
        end

        CollectionService:RemoveTag(PersistentModel, "ForcePersistent")
        PersistentModel:SetAttribute("OldStreamingMode", nil)
    end
end)

if LocalPlayer.Character then
    Utils.CharacterAdded(LocalPlayer.Character)
end

SaveManager:LoadAutoloadConfig()
PreAutoloadConfig = false

Utils.GameNotify("Sasware [Fisch] loaded successfully!")
