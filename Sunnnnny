-- Load Neverlose UI Library
local NeverloseLib = loadstring(game:HttpGet("https://raw.githubusercontent.com/shlexware/Neverlose/main/source"))()

-- Create the Window
local Window = NeverloseLib:Window("Ogsunny Hub V1.2.4", "Neverlose", true)

-- Tables
local teleportSpots = {}
local itemSpots = {
    Bait_Crate = CFrame.new(384.57513427734375, 135.3519287109375, 337.5340270996094),
    Carbon_Rod = CFrame.new(454.083618, 150.590073, 225.328827, 0.985374212, -0.170404434, 1.41561031e-07, 1.41561031e-07, 1.7285347e-06, 1, -0.170404434, -0.985374212, 1.7285347e-06),
    Crab_Cage = CFrame.new(474.803589, 149.664566, 229.49469, -0.721874595, 0, 0.692023814, 0, 1, 0, -0.692023814, 0, -0.721874595),
    Fast_Rod = CFrame.new(447.183563, 148.225739, 220.187454, 0.981104493, 1.26492232e-05, 0.193478703, -0.0522461236, 0.962867677, 0.264870107, -0.186291039, -0.269973755, 0.944674432),
    Flimsy_Rod = CFrame.new(471.107697, 148.36171, 229.642441, 0.841614008, 0.0774728209, -0.534493923, 0.00678436086, 0.988063335, 0.153898612, 0.540036798, -0.13314943, 0.831042409),
    GPS = CFrame.new(517.896729, 149.217636, 284.856842, 7.39097595e-06, -0.719539165, -0.694451928, -1, -7.39097595e-06, -3.01003456e-06, -3.01003456e-06, 0.694451928, -0.719539165),
    Long_Rod = CFrame.new(485.695038, 171.656326, 145.746109, -0.630167365, -0.776459217, -5.33461571e-06, 5.33461571e-06, -1.12056732e-05, 1, -0.776459217, 0.630167365, 1.12056732e-05),
    Lucky_Rod = CFrame.new(446.085999, 148.253006, 222.160004, 0.974526405, -0.22305499, 0.0233404674, 0.196993902, 0.901088715, 0.386306256, -0.107199371, -0.371867687, 0.922075212),
    Plastic_Rod = CFrame.new(454.425385, 148.169739, 229.172424, 0.951755166, 0.0709736273, -0.298537821, -3.42726707e-07, 0.972884834, 0.231290117, 0.306858391, -0.220131472, 0.925948203),
    Training_Rod = CFrame.new(457.693848, 148.357529, 230.414307, 1, -0, 0, 0, 0.975410998, 0.220393807, -0, -0.220393807, 0.975410998)
}

-- Services
local VirtualInputManager = game:GetService("VirtualInputManager")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local VirtualUser = game:GetService("VirtualUser")
local HttpService = game:GetService("HttpService")
local GuiService = game:GetService("GuiService")
local RunService = game:GetService("RunService")
local Workspace = game:GetService("Workspace")
local Players = game:GetService("Players")

-- Locals
local LocalPlayer = Players.LocalPlayer
local LocalCharacter = LocalPlayer.Character or LocalPlayer.CharacterAdded:Wait()
local HumanoidRootPart = LocalCharacter:WaitForChild("HumanoidRootPart")
local PlayerGUI = LocalPlayer:FindFirstChildOfClass("PlayerGui")
local RenderStepped = RunService.RenderStepped
local WaitForSomeone = RenderStepped.Wait

-- Variables
local autoShake = false
local autoShakeDelay = 0.1
local autoShakeMethod = "KeyCodeEvent"
local autoReel = false
local autoReelDelay = 2
local autoCast = false
local autoCastMode = "Legit"
local autoCastDelay = 2
local Noclip = false

-- Create Tabs
local MainTab = Window:Tab("Main")
local TeleportsTab = Window:Tab("Teleports")

-- Fix for character references
LocalPlayer.CharacterAdded:Connect(function(Character)
    LocalCharacter = Character
    HumanoidRootPart = Character:WaitForChild("HumanoidRootPart")
end)

-- Function to setup character-specific connections
function setupCharacterConnections()
    if autoCastConnection then autoCastConnection:Disconnect() end

    autoCastConnection = LocalCharacter.ChildAdded:Connect(function(child)
        if child:IsA("Tool") and child:FindFirstChild("events") and child.events:FindFirstChild("cast") ~= nil and autoCast then
            task.wait(autoCastDelay)
            if autoCastMode == "Legit" then
                VirtualInputManager:SendMouseButtonEvent(0, 0, 0, true, LocalPlayer, 0)
                HumanoidRootPart.ChildAdded:Connect(function()
                    if HumanoidRootPart:FindFirstChild("power") ~= nil and HumanoidRootPart.power.powerbar.bar ~= nil then
                        HumanoidRootPart.power.powerbar.bar.Changed:Connect(function(property)
                            if property == "Size" then
                                if HumanoidRootPart.power.powerbar.bar.Size == UDim2.new(1, 0, 1, 0) then
                                    VirtualInputManager:SendMouseButtonEvent(0, 0, 0, false, LocalPlayer, 0)
                                end
                            end
                        end)
                    end
                end)
            elseif autoCastMode == "Rage" then
                child.events.cast:FireServer(100)
            end
        end
    end)
end

-- GUI-related connections
if autoreelandshakeConnection then autoreelandshakeConnection:Disconnect() end
autoreelandshakeConnection = PlayerGUI.ChildAdded:Connect(function(GUI)
    if GUI:IsA("ScreenGui") and GUI.Name == "shakeui" then
        if GUI:FindFirstChild("safezone") ~= nil then
            GUI.safezone.ChildAdded:Connect(function(child)
                if child:IsA("ImageButton") and child.Name == "button" then
                    if autoShake then
                        task.wait(autoShakeDelay)
                        if child.Visible then
                            if autoShakeMethod == "ClickEvent" then
                                local pos = child.AbsolutePosition
                                local size = child.AbsoluteSize
                                VirtualInputManager:SendMouseButtonEvent(pos.X + size.X / 2, pos.Y + size.Y / 2, 0, true, LocalPlayer, 0)
                                VirtualInputManager:SendMouseButtonEvent(pos.X + size.X / 2, pos.Y + size.Y / 2, 0, false, LocalPlayer, 0)
                            elseif autoShakeMethod == "KeyCodeEvent" then
                                while WaitForSomeone(RenderStepped) do
                                    if autoShake and GUI.safezone:FindFirstChild(child.Name) ~= nil then
                                        task.wait()
                                        pcall(function()
                                            GuiService.SelectedObject = child
                                            if GuiService.SelectedObject == child then
                                                VirtualInputManager:SendKeyEvent(true, Enum.KeyCode.Return, false, game)
                                                VirtualInputManager:SendKeyEvent(false, Enum.KeyCode.Return, false, game)
                                            end
                                        end)
                                    else
                                        GuiService.SelectedObject = nil
                                        break
                                    end
                                end
                            end
                        end
                    end
                end
            end)
        end
    end
    if GUI:IsA("ScreenGui") and GUI.Name == "reel" then
        if autoReel and ReplicatedStorage:WaitForChild("events"):WaitForChild("reelfinished") ~= nil then
            repeat task.wait(autoReelDelay) ReplicatedStorage.events.reelfinished:FireServer(100, false) until GUI == nil or GUI.Parent == nil
        end
    end
end)

if autoCastConnection2 then autoCastConnection2:Disconnect() end
autoCastConnection2 = PlayerGUI.ChildRemoved:Connect(function(GUI)
    if GUI.Name == "reel" then
        local Tool = LocalCharacter:FindFirstChildOfClass("Tool")
        if autoCast and Tool ~= nil and Tool:FindFirstChild("events") and Tool.events:FindFirstChild("cast") ~= nil then
            task.wait(autoCastDelay)
            if autoCastMode == "Legit" then
                VirtualInputManager:SendMouseButtonEvent(0, 0, 0, true, LocalPlayer, 0)
                HumanoidRootPart.ChildAdded:Connect(function()
                    if HumanoidRootPart:FindFirstChild("power") ~= nil and HumanoidRootPart.power.powerbar.bar ~= nil then
                        HumanoidRootPart.power.powerbar.bar.Changed:Connect(function(property)
                            if property == "Size" then
                                if HumanoidRootPart.power.powerbar.bar.Size == UDim2.new(1, 0, 1, 0) then
                                    VirtualInputManager:SendMouseButtonEvent(0, 0, 0, false, LocalPlayer, 0)
                                end
                            end
                        end)
                    end
                end)
            elseif autoCastMode == "Rage" then
                Tool.events.cast:FireServer(100)
            end
        end
    end
end)

-- Setup initial character connections
setupCharacterConnections()

-- Noclip
if NoclipConnection then NoclipConnection:Disconnect() end
NoclipConnection = RunService.Stepped:Connect(function()
    if Noclip then
        if LocalCharacter ~= nil then
            for _, v in pairs(LocalCharacter:GetDescendants()) do
                if v:IsA("BasePart") and v.CanCollide then
                    v.CanCollide = false
                end
            end
        end
    end
end)

-- Populate teleport spots
for _, v in pairs(TpSpotsFolder:GetChildren()) do
    if not table.find(teleportSpots, v.Name) then
        table.insert(teleportSpots, v.Name)
    end
end

-- Main Tab UI
MainTab:Section("Auto Shake")

MainTab:Toggle("Enable AutoShake", false, function(Value)
    autoShake = Value
end)

MainTab:Dropdown("AutoShake Method", {"ClickEvent", "KeyCodeEvent"}, function(Value)
    autoShakeMethod = Value
end)

MainTab:Slider("AutoShake Delay", 0, 10, 0.1, "seconds", function(Value)
    autoShakeDelay = Value
end)

MainTab:Section("Auto Reel")

MainTab:Toggle("Enable AutoReel", false, function(Value)
    autoReel = Value
end)

MainTab:Slider("AutoReel Delay", 0, 10, 2, "seconds", function(Value)
    autoReelDelay = Value
end)

MainTab:Section("Auto Cast")

MainTab:Toggle("Enable AutoCast", false, function(Value)
    autoCast = Value
    local Tool = LocalCharacter:FindFirstChildOfClass("Tool")
    if Tool and Tool:FindFirstChild("events") and Tool.events:FindFirstChild("cast") and Value then
        task.wait(autoCastDelay)
        if autoCastMode == "Legit" then
            VirtualInputManager:SendMouseButtonEvent(0, 0, 0, true, LocalPlayer, 0)
            HumanoidRootPart.ChildAdded:Connect(function()
                if HumanoidRootPart:FindFirstChild("power") and HumanoidRootPart.power.powerbar.bar then
                    HumanoidRootPart.power.powerbar.bar.Changed:Connect(function(property)
                        if property == "Size" and HumanoidRootPart.power.powerbar.bar.Size == UDim2.new(1, 0, 1, 0) then
                            VirtualInputManager:SendMouseButtonEvent(0, 0, 0, false, LocalPlayer, 0)
                        end
                    end)
                end
            end)
        elseif autoCastMode == "Rage" then
            Tool.events.cast:FireServer(100)
        end
    end
end)

MainTab:Dropdown("AutoCast Mode", {"Legit", "Rage"}, function(Value)
    autoCastMode = Value
end)

MainTab:Slider("AutoCast Delay", 0, 10, 2, "seconds", function(Value)
    autoCastDelay = Value
end)

-- Teleports Tab
TeleportsTab:Section("Teleports")

TeleportsTab:Dropdown("Teleport to Location", teleportSpots, function(Value)
    if teleportSpots and HumanoidRootPart then
        HumanoidRootPart.CFrame = TpSpotsFolder:FindFirstChild(Value).CFrame + Vector3.new(0, 5, 0)
    end
end)

TeleportsTab:Dropdown("Teleport to Item", {"Bait_Crate", "Carbon_Rod", "Crab_Cage", "Fast_Rod", "Flimsy_Rod", "GPS", "Long_Rod", "Lucky_Rod", "Plastic_Rod", "Training_Rod"}, function(Value)
    if itemSpots and HumanoidRootPart then
        HumanoidRootPart.CFrame = itemSpots[Value]
    end
end)

-- Unload Script
MainTab:Button("Unload Script", function()
    -- Disconnect all connections
    if autoreelandshakeConnection then autoreelandshakeConnection:Disconnect() end
    if autoCastConnection then autoCastConnection:Disconnect() end
    if autoCastConnection2 then autoCastConnection2:Disconnect() end
    if NoclipConnection then NoclipConnection:Disconnect() end

    -- Remove GUI elements
    for _, v in pairs(PlayerGUI:GetChildren()) do
        if v:IsA("ScreenGui") and (v.Name == "shakeui" or v.Name == "reel") then
            v:Destroy()
        end
    end

    -- Unload the Neverlose UI Library
    NeverloseLib:Unload()

    -- Notify the user
    NeverloseLib:Notification("Script Unloaded", "The script has been unloaded successfully.", 5)
end)
