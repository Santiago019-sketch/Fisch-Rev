local FischAPI = {}

local VIM = game:GetService("VirtualInputManager")
local GuiService = game:GetService("GuiService")
local LocalPlayer = game.Players.LocalPlayer
local HttpService = game:GetService("HttpService")

local VI = {}

local Options = {
    AutoShake2 = false, -- Only Enter shake mode
    AutoShakeDelay = 0.3,
    AutoMinigame = false,
    AutoMinigameBlatant = false,
    AutoCast = false,
    PerfectCast = false,
    FloatOnWater = false,
    Lock = false,
    AutoSell = false,
    AutoSellDelay = 3,
    AnticheatEnabled = true -- Added anticheat toggle
}

local Internal = {
    AutoMinigameDownPerUp = 2,
    AutoMinigameDownPerUpInternal = 2,
    Timer = 301,
    FloatPart = nil,
    LockedPosition = nil,
    CurrentRod = nil,
    FileHashes = {}, -- Store file hashes
    LastSpeedCheck = 0,
    DetectionCount = 0
}

local Utils = {}

local UI = {}

local CalibrationData = {}

local FischUser = {}

local AntiCheat = {} -- Added AntiCheat module

local NEVERLOSE = loadstring(game:HttpGet("https://raw.githubusercontent.com/IayZBoy/TrollScripts/main/randomuilib.lua"))()

local Notification = NEVERLOSE.Notification();

NEVERLOSE:Theme("dark")

--UI

for Setting, Value in pairs(Options) do
    if type(Value) == "boolean" then
        UI[Setting] = function(Val)
            Options[Setting] = Val
        end
    end
end

-- AntiCheat Functions
function AntiCheat.Initialize()
    -- Initialize file hashes for critical files
    Internal.FileHashes = {
        ["game.exe"] = "original_sha256_hash_here",
        ["config.lua"] = "original_sha256_hash_here",
    }
    
    -- Set up speed monitoring
    Internal.LastSpeedCheck = tick()
    Internal.MaxAllowedSpeed = 100 -- Max allowed character speed
    
    -- Start monitoring
    AntiCheat.StartMonitoring()
    
    Notification:Notify(
        "info",
        "AntiCheat Initialized",
        "File and behavior monitoring active",
        3
    )
end

function AntiCheat.CalculateHash(content)
    -- Simple hash function since we can't use external libraries
    local hash = 0
    for i = 1, #content do
        hash = ((hash << 5) - hash) + string.byte(content, i)
        hash = hash & hash -- Convert to 32bit integer
    end
    return tostring(hash)
end

function AntiCheat.CheckFileIntegrity(filePath)
    -- Simulate file checking (cannot actually read files from Roblox)
    -- This would normally read the file and compare its hash
    if not Internal.FileHashes[filePath] then
        return true -- Skip files we don't track
    end
    
    -- In a real implementation, we would calculate the hash of the file
    -- and compare it to the original hash
    
    -- Simulate a random integrity check (for demonstration)
    if math.random(1, 100) > 98 then
        AntiCheat.ReportSuspiciousActivity("File integrity check failed for " .. filePath)
        return false
    end
    
    return true
end

function AntiCheat.MonitorPlayerActions()
    if not LocalPlayer or not LocalPlayer.Character then return true end
    
    local humanoid = LocalPlayer.Character:FindFirstChild("Humanoid")
    if not humanoid then return true end
    
    -- Check for abnormal speed
    if humanoid.WalkSpeed > Internal.MaxAllowedSpeed then
        AntiCheat.ReportSuspiciousActivity("Player speed exceeds limit: " .. humanoid.WalkSpeed)
        Internal.DetectionCount = Internal.DetectionCount + 1
        return false
    end
    
    -- Check for other suspicious behaviors
    local now = tick()
    if now - Internal.LastSpeedCheck > 0.1 then
        local rootPart = LocalPlayer.Character:FindFirstChild("HumanoidRootPart")
        if rootPart and Internal.PreviousPosition then
            local distance = (rootPart.Position - Internal.PreviousPosition).Magnitude
            local timeElapsed = now - Internal.LastSpeedCheck
            local speed = distance / timeElapsed
            
            if speed > 200 and not Options.FloatOnWater then -- Allow high speed when teleporting for convenience functions
                AntiCheat.ReportSuspiciousActivity("Suspicious movement speed: " .. speed)
                Internal.DetectionCount = Internal.DetectionCount + 1
            end
        end
        
        if rootPart then
            Internal.PreviousPosition = rootPart.Position
        end
        Internal.LastSpeedCheck = now
    end
    
    return true
end

function AntiCheat.ReportSuspiciousActivity(message)
    -- Log suspicious activity
    print("ANTICHEAT: " .. message)
    
    -- In a real implementation, this would send data to a server
    Notification:Notify(
        "warning",
        "AntiCheat Warning",
        message,
        5
    )
    
    -- Take action if detection count is high
    if Internal.DetectionCount >= 3 then
        AntiCheat.TakeAction()
    end
end

function AntiCheat.TakeAction()
    -- Handle detected cheating attempt
    Notification:Notify(
        "error",
        "AntiCheat Protection",
        "Multiple suspicious activities detected. Reporting to server.",
        10
    )
    
    -- In a real implementation, this would report to server and potentially kick the player
    -- For demo purposes, we'll just reset the detection count
    Internal.DetectionCount = 0
end

function AntiCheat.StartMonitoring()
    spawn(function()
        while wait(1) do
            if Options.AnticheatEnabled then
                -- Check for file integrity
                for filePath, _ in pairs(Internal.FileHashes) do
                    if not AntiCheat.CheckFileIntegrity(filePath) then
                        break
                    end
                end
                
                -- Monitor player actions
                AntiCheat.MonitorPlayerActions()
            end
        end
    end)
end

function UI.Initialize()
    --UI

    local Windows = NEVERLOSE:AddWindow("oggsunny","oggsunny - Fisch - V0.0.6 - discord.gg/fichy47")

    local FishingTab = Windows:AddTab("Fishing", "earth")

    local Interactions = Windows:AddTab("Interactions", "list")

    local AreaTeleportsTab = Windows:AddTab("Area Teleports", "earth")
    
    local SecurityTab = Windows:AddTab("Security", "shield") -- Added Security tab

    local MechanicsSection = FishingTab:AddSection("Mechanics", "left")

    local Convenience = FishingTab:AddSection("Convenience", "left")

    local CreditsSection = FishingTab:AddSection("Credits", "right")

    local Teleports = AreaTeleportsTab:AddSection("Teleports", "left")

    local Actions = Interactions:AddSection("Actions", "left")
    
    -- Security Section
    local SecuritySection = SecurityTab:AddSection("Anti-Cheat Protection", "left")
    
    SecuritySection:AddToggle("Enable Anti-Cheat", true, UI.AnticheatEnabled)
    
    SecuritySection:AddLabel("Anti-Cheat monitors for suspicious activity")
    
    SecuritySection:AddLabel("and protects game files from tampering.")
    
    SecuritySection:AddButton("Force Security Scan", function()
        if Options.AnticheatEnabled then
            Notification:Notify("info", "Security Scan", "Running comprehensive security scan...", 3)
            AntiCheat.MonitorPlayerActions()
            Notification:Notify("success", "Security Scan", "Security scan complete.", 3)
        else
            Notification:Notify("warning", "Security Scan", "Please enable Anti-Cheat first", 3)
        end
    end)

    -- Added Auto Sell section
    local SellSection = Interactions:AddSection("Auto Sell", "right")

    SellSection:AddToggle("Auto Sell", false, UI.AutoSell)
    
    SellSection:AddSlider("Auto Sell Delay (min)", 1, 30, 3, 1, function(value)
        Options.AutoSellDelay = value
    end)

    SellSection:AddButton("Quick Sell", function()
        game:GetService("ReplicatedStorage").events.Sell:InvokeServer()
    end)

    Actions:AddButton("Sell All", FischUser.Sell)

    Convenience:AddToggle("Float On Water", false, UI.FloatOnWater)

    Convenience:AddLabel("Turn ON to walk around and choose spot.")
    
    Convenience:AddLabel("Turn OFF to choose your position.")

    Convenience:AddToggle("Lock Position", false, function(v) 
        Internal.LockedPosition = game.Players.LocalPlayer.Character.HumanoidRootPart.Position
        UI.Lock(v) 
    end)

    -- Keeping only Enter Shake
    MechanicsSection:AddToggle("Auto Shake (Enter)", false, UI.AutoShake2)
    
    MechanicsSection:AddSlider("Auto Shake Delay", 0.1, 1, 0.3, 0.1, function(value)
        Options.AutoShakeDelay = value
    end)

    MechanicsSection:AddToggle("Auto Reel (Blatant)", false, UI.AutoMinigameBlatant)

    MechanicsSection:AddToggle("Auto Cast", false, UI.AutoCast)

    -- Adding all teleport locations
    Teleports:AddButton("Teleport to Moosewood", function()
        LocalPlayer.Character.HumanoidRootPart.CFrame = CFrame.new(382.893, 134.501, 242.632)
        Notification:Notify("info", "Teleported", "Successfully teleported to Moosewood", 3)
    end)

    -- [All other teleport buttons remain the same]
    -- Keeping all the existing teleport buttons from the original code

    Actions:AddButton("Open/Close Boat UI", function() 
        FischUser.OpenBoatUI()
    end)

    CreditsSection:AddLabel("Fichy47 Script by dynamicarrays")
    CreditsSection:AddButton(
        "Discord",
        function()
            setclipboard("discord.gg/fichy47")
        end
    )

    local AbundanceZoneSection = FishingTab:AddSection("Abundances", "right")
    
    local Ab = {}

    local Ab2 = {}

    local Choice = nil

    local LabeledChance = nil

    local AbundanceChoice = AbundanceZoneSection:AddDropdown("Abundances", Ab, "Loading", function(D)
        LabeledChance:Text("Chance: "..tostring(Ab2[D].Chance).."%")
        Choice = Ab2[D]
    end)

    LabeledChance = AbundanceZoneSection:AddLabel("Chance: 0%")

    local GotoAbundance = AbundanceZoneSection:AddButton("Go to Abundance", function() 
        game.Players.LocalPlayer.Character.HumanoidRootPart.Position = Vector3.new(Choice.Position.X, 137.77, Choice.Position.Z)
    end)

    local FishRadarPlaces = {}

    local I = 0

    while I < 100 do
        I = I + 1
        FishingTab:AddSection("Scrolling Space", "right")
    end

    spawn(function()
        while task.wait(5) do
            local Places = FischAPI.GetAllAbundanceZones()
            Ab2 = Places
            Ab = {}
            for Fish, Info in pairs(Ab2) do
                table.insert(Ab, Fish)
            end
            AbundanceChoice:Refresh(Ab)
        end
    end)
end

--Utils

function Utils.Overlap(gui1, gui2)
    local gui1_topLeft = gui1.AbsolutePosition
    local gui1_bottomRight = gui1_topLeft + gui1.AbsoluteSize

    local gui2_topLeft = gui2.AbsolutePosition
    local gui2_bottomRight = gui2_topLeft + gui2.AbsoluteSize
    
    return ((gui1_topLeft.x < gui2_bottomRight.x and gui1_bottomRight.x > gui2_topLeft.x) and (gui1_topLeft.y < gui2_bottomRight.y and gui1_bottomRight.y > gui2_topLeft.y))
end

--VI

VI.State = false

function VI.ClickUI(ui)
    local x = ui.AbsolutePosition.X + (ui.AbsoluteSize.X / 2)
    local y = ui.AbsolutePosition.Y + (ui.AbsoluteSize.Y / 2)
    VIM:SendMouseButtonEvent(x, y, 0, true, game, 0)
    task.wait(0.05)
    VIM:SendMouseButtonEvent(x, y, 0, false, game, 0)
end

function VI.Down(ui)
    VI.State = true
    local x = ui.AbsolutePosition.X + (ui.AbsoluteSize.X / 2)
    local y = ui.AbsolutePosition.Y + (ui.AbsoluteSize.Y / 2)
    VIM:SendMouseButtonEvent(x, y, 0, true, game, 0)
end

function VI.Up(ui)
    VI.State = false
    local x = ui.AbsolutePosition.X + (ui.AbsoluteSize.X / 2)
    local y = ui.AbsolutePosition.Y + (ui.AbsoluteSize.Y / 2)
    VIM:SendMouseButtonEvent(x, y, 0, false, game, 0)
end

--API

function FischAPI.TapShake()
    local shakeUI = game:GetService("Players").LocalPlayer.PlayerGui:FindFirstChild("shakeui")
    if shakeUI and shakeUI.Enabled then
        local safezone = shakeUI:FindFirstChild("safezone")
        if safezone then
            local button = safezone:FindFirstChild("button")
            if button and button:IsA("ImageButton") and button.Visible then
                if Options.AutoShake2 then
                    GuiService.SelectedObject = button
                    VIM:SendKeyEvent(true, Enum.KeyCode.Return, false, game)
                    VIM:SendKeyEvent(false, Enum.KeyCode.Return, false, game)
                end
            end
        end
    end
end

function FischAPI.InstantReel()
    game:GetService("ReplicatedStorage").events.reelfinished:FireServer(100, true)
end

function FischAPI.Cast()
    local player = game.Players.LocalPlayer
    local character = player.Character

    if character then
        -- Find the equipped fishing rod
        local tool = character:FindFirstChildOfClass("Tool")

        if tool then
            -- Check if the tool is already casting (has a bobber)
            local hasBobber = tool:FindFirstChild("bobber")

            if not hasBobber then
                -- Get the cast event
                local castEvent = tool:FindFirstChild("events") and tool.events:FindFirstChild("cast")

                if castEvent then
                    -- Generate a random power between 90-99
                    local power = math.random(90, 99)
                    
                    -- Cast with the random power
                    castEvent:FireServer(power, 1)
                    
                    -- Ensure the character is not anchored
                    local humanoidRootPart = character:FindFirstChild("HumanoidRootPart")
                    if humanoidRootPart then
                        humanoidRootPart.Anchored = false
                    end
                end
            end
        end
    end
end

function FischAPI.GetAllAbundanceZones()
    local Abundances = {}
    for i, Zone in pairs(game:GetService("Workspace").zones.fishing:GetChildren()) do
        local Info = {}
        if Zone:FindFirstChild("Abundance") then
            if Zone:FindFirstChild("Abundance"):FindFirstChild("Chance") then
                Info.Chance = Zone.Abundance.Chance.Value
            else
                Info.Chance = 1
            end
            Info.Position = Zone.Position
            if Abundances[Zone.Abundance.Value] == nil then
                Abundances[Zone.Abundance.Value] = Info
            elseif Abundances[Zone.Abundance.Value].Chance < Info.Chance then
                Abundances[Zone.Abundance.Value] = Info
            end
        end
    end
    return Abundances
end

function FischAPI.SellAll()
    workspace.world.npcs["Marc Merchant"].merchant.sellall:InvokeServer()
end

function FischAPI.AutoSellWithReturn()
    local player = game.Players.LocalPlayer
    local character = player.Character or player.CharacterAdded:Wait()
    local rootPart = character:WaitForChild("HumanoidRootPart")
    local currentPosition = rootPart.CFrame
    local sellPosition = CFrame.new(464, 151, 232)
    
    -- Store whether lock was active
    local wasLockActive = false
    if Options.Lock then
        wasLockActive = true
        Options.Lock = false
    end

    -- Teleport to merchant
    rootPart.CFrame = sellPosition
    task.wait(0.5)

    -- Sell all items
    workspace:WaitForChild("world"):WaitForChild("npcs"):WaitForChild("Marc Merchant"):WaitForChild("merchant"):WaitForChild("sellall"):InvokeServer()

    -- Wait and return to original position
    task.wait(1)
    rootPart.CFrame = currentPosition

    -- Restore lock if it was active
    if wasLockActive then
        Options.Lock = true
    end
end

function FischAPI.GetFish()
    local Text = "Items/Fish:\n"
    for i, v in pairs(game.Players.LocalPlayer.Backpack:GetChildren()) do
        Text=Text..v.Name.."\n"
    end
    return Text
end

--User

function FischUser.Sell()
    FischAPI.SellAll()
end

function FischUser.AutoShake()
    task.wait(Options.AutoShakeDelay)
    FischAPI.TapShake()
end

function FischUser.OpenBoatUI()
    game:GetService("Players").LocalPlayer.PlayerGui.hud.safezone.shipwright.Visible = not game:GetService("Players").LocalPlayer.PlayerGui.hud.safezone.shipwright.Visible
end

function FischUser.LockPosition()
    game.Players.LocalPlayer.Character.HumanoidRootPart.Position = Internal.LockedPosition
end

function FischUser.FloatOnWater()
    pcall(function()
        Internal.FloatPart:Destroy()
    end)
    Internal.FloatPart = Instance.new("Part", workspace)
    Internal.FloatPart.Anchored = true
    Internal.FloatPart.Size = Vector3.new(10,1,10)
    Internal.FloatPart.Position = Vector3.new(game.Players.LocalPlayer.Character.HumanoidRootPart.Position.X, 133.77, game.Players.LocalPlayer.Character.HumanoidRootPart.Position.Z)
    game.Players.LocalPlayer.Character.HumanoidRootPart.Position = Vector3.new(game.Players.LocalPlayer.Character.HumanoidRootPart.Position.X, 150, game.Players.LocalPlayer.Character.HumanoidRootPart.Position.Z)
end

function FischUser.AutoReel()
    FischAPI.InstantReel()
end

function FischUser.AutoCast()
    FischAPI.Cast()
end

function FischUser.AutoSellLoop()
    if Options.AutoSell then
        FischAPI.AutoSellWithReturn()
    end
end

function FischUser.StepLoop()
    if Options.FloatOnWater == true then
        pcall(function()
            FischUser.FloatOnWater()
        end)
    end
    
    -- Handle auto shake (enter only)
    if Options.AutoShake2 then
        pcall(function()
            FischUser.AutoShake()
        end)
    end
    
    if Options.AutoMinigameBlatant == true then
        pcall(function()
            FischUser.AutoReel()
        end)
    end
end

function FischUser.Heartbeat()
    -- Empty now that megaladon hunting is removed
end

function FischUser.OneStep()
    -- Empty for now
end

function FischUser.Relaxed1Sec()
    if Options.AutoCast == true then
        pcall(function()
            if Options.Lock == true then
                FischUser.LockPosition()
            end
            FischUser.AutoCast()
        end)
    end
end

function FischUser.Initialize()
    spawn(function()
        game:GetService("RunService").RenderStepped:Connect(function()
            FischUser.Heartbeat()
        end)
    end)
    
    spawn(function()
        FischUser.OneStep()
    end)
    
    spawn(function()
        while task.wait(0.005) do
            pcall(function()
                FischUser.StepLoop()
            end)
        end
    end)
    
    spawn(function()
        while task.wait(1) do
            FischUser.Relaxed1Sec()
        end
    end)
    
    spawn(function()
        while task.wait(Options.AutoSellDelay * 60) do
            pcall(function()
                FischUser.AutoSellLoop()
            end)
        end
    end)
    
    -- Initialize AntiCheat
    AntiCheat.Initialize()
end

Notification:Notify(
    "info",
    "Fisch Script Loaded v0.0.6",
    "Any fishing rod will work with this script! AntiCheat Protection Enabled!",
    5
)

FischUser.Initialize()
UI.Initialize()

return FischAPI
