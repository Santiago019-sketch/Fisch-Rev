local FischAPI = {}

local VIM = game:GetService("VirtualInputManager")
local GuiService = game:GetService("GuiService")
local LocalPlayer = game.Players.LocalPlayer
local HttpService = game:GetService("HttpService")
local RunService = game:GetService("RunService")

local VI = {}

local Options = {
    AutoShake2 = false, -- Only Enter shake mode
    AutoShakeDelay = 0.3,
    AutoMinigame = false,
    AutoMinigameBlatant = false,
    AutoCast = false,
    PerfectCast = false,
    FloatOnWater = false,
    Lock = false,
    AutoSell = false,
    AutoSellDelay = 3
}

local Internal = {
    AutoMinigameDownPerUp = 2,
    AutoMinigameDownPerUpInternal = 2,
    Timer = 301,
    FloatPart = nil,
    LockedPosition = nil,
    CurrentRod = nil,
    LastSpeedCheck = 0,
    DetectionCount = 0,
    PreviousPosition = nil,
    UILoaded = false
}

local Utils = {}
local UI = {}
local CalibrationData = {}
local FischUser = {}

-- Ensure NEVERLOSE library is loaded properly with error handling
local NEVERLOSE = nil
local success, result = pcall(function()
    return loadstring(game:HttpGet("https://raw.githubusercontent.com/IayZBoy/TrollScripts/main/randomuilib.lua"))()
end)

if success then
    NEVERLOSE = result
else
    print("Failed to load UI library: " .. tostring(result))
    -- Create a basic notification function as fallback
    local function BasicNotify(title, message)
        print("[" .. title .. "] " .. message)
    end
    NEVERLOSE = {
        Notification = function() 
            return {
                Notify = BasicNotify
            }
        end,
        Theme = function() end,
        AddWindow = function() 
            return {
                AddTab = function() 
                    return {
                        AddSection = function() 
                            return {
                                AddToggle = function() end,
                                AddSlider = function() end,
                                AddButton = function() end,
                                AddLabel = function() end,
                                AddDropdown = function() return {
                                    Refresh = function() end,
                                    Text = function() end
                                } end
                            }
                        end
                    }
                end
            }
        end
    }
end

local Notification = NEVERLOSE.Notification();

if NEVERLOSE.Theme then
    NEVERLOSE:Theme("dark")
end

--UI
for Setting, Value in pairs(Options) do
    if type(Value) == "boolean" then
        UI[Setting] = function(Val)
            Options[Setting] = Val
        end
    end
end

-- Fixed UI initialization
function UI.Initialize()
    if Internal.UILoaded then return end
    
    local success, err = pcall(function()
        --UI
        local Windows = NEVERLOSE:AddWindow("oggsunny","oggsunny - Fisch - V0.0.7 - credit to oggsunny")

        local FishingTab = Windows:AddTab("Fishing", "earth")
        local Interactions = Windows:AddTab("Interactions", "list")
        local AreaTeleportsTab = Windows:AddTab("Area Teleports", "earth")

        local MechanicsSection = FishingTab:AddSection("Mechanics", "left")
        local Convenience = FishingTab:AddSection("Convenience", "left")
        local CreditsSection = FishingTab:AddSection("Credits", "right")
        local Teleports = AreaTeleportsTab:AddSection("Teleports", "left")
        local Actions = Interactions:AddSection("Actions", "left")
        
        -- Auto Sell section
        local SellSection = Interactions:AddSection("Auto Sell", "right")
        SellSection:AddToggle("Auto Sell", false, UI.AutoSell)
        SellSection:AddSlider("Auto Sell Delay (min)", 1, 30, 3, 1, function(value)
            Options.AutoSellDelay = value
        end)
        SellSection:AddButton("Quick Sell", function()
            game:GetService("ReplicatedStorage").events.Sell:InvokeServer()
        end)

        Actions:AddButton("Sell All", FischUser.Sell)
        Convenience:AddToggle("Float On Water", false, UI.FloatOnWater)
        Convenience:AddLabel("Turn ON to walk around and choose spot.")
        Convenience:AddLabel("Turn OFF to choose your position.")
        Convenience:AddToggle("Lock Position", false, function(v) 
            Internal.LockedPosition = game.Players.LocalPlayer.Character.HumanoidRootPart.Position
            UI.Lock(v) 
        end)

        -- Core fishing mechanics
        MechanicsSection:AddToggle("Auto Shake (Enter)", false, UI.AutoShake2)
        MechanicsSection:AddSlider("Auto Shake Delay", 0.1, 1, 0.3, 0.1, function(value)
            Options.AutoShakeDelay = value
        end)
        MechanicsSection:AddToggle("Auto Reel (Blatant)", false, UI.AutoMinigameBlatant)
        MechanicsSection:AddToggle("Auto Cast", false, UI.AutoCast)

        -- Teleport locations from pzgdCbNN.txt
        Teleports:AddButton("Ancient Isle Teleport", function()
            local player = game.Players.LocalPlayer
            local character = player.Character or player.CharacterAdded:Wait()
            local targetPart = workspace.world.map["Ancient Isle"].Terrain:GetChildren()[305]
            
            if targetPart and character then
                local humanoidRootPart = character:FindFirstChild("HumanoidRootPart")
                if humanoidRootPart then
                    humanoidRootPart.CFrame = targetPart.CFrame
                    Notification:Notify("info", "Teleported", "Successfully teleported to Ancient Isle", 3)
                else
                    Notification:Notify("error", "Error", "HumanoidRootPart not found!", 3)
                end
            else
                Notification:Notify("error", "Error", "Target location not found!", 3)
            end
        end)
        
        Teleports:AddButton("Roslit Hamlet Teleport", function()
            local player = game.Players.LocalPlayer
            local character = player.Character or player.CharacterAdded:Wait()
            local teleportLocation = workspace.zones.player:FindFirstChild("Roslit Hamlet")
            
            if teleportLocation and character then
                character:SetPrimaryPartCFrame(teleportLocation.CFrame)
                Notification:Notify("info", "Teleported", "Successfully teleported to Roslit Hamlet", 3)
            else
                Notification:Notify("error", "Error", "Teleport location not found!", 3)
            end
        end)
        
        Teleports:AddButton("Moosewood Teleport", function()
            local zone = workspace.zones.player:FindFirstChild("Moosewood")
            if zone and zone:IsA("BasePart") then
                game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = zone.CFrame
                Notification:Notify("info", "Teleported", "Successfully teleported to Moosewood", 3)
            else
                Notification:Notify("error", "Error", "Zone not found or invalid part", 3)
            end
        end)
        
        Teleports:AddButton("Forsaken Shores Teleport", function()
            local args = {
                [1] = workspace.zones.player:FindFirstChild("Forsaken Shores")
            }
            
            game:GetService("ReplicatedStorage").packages.Net:FindFirstChild("RF/SetZone"):InvokeServer(unpack(args))
            Notification:Notify("info", "Teleported", "Successfully teleported to Forsaken Shores", 3)
        end)
        
        Teleports:AddButton("The Depths Teleport", function()
            local args = {
                [1] = workspace.zones.player:FindFirstChild("The Depths")
            }
            
            game:GetService("ReplicatedStorage").packages.Net:FindFirstChild("RF/SetZone"):InvokeServer(unpack(args))
            Notification:Notify("info", "Teleported", "Successfully teleported to The Depths", 3)
        end)
        
        Teleports:AddButton("Brine Pool Teleport", function()
            local args = {
                [1] = workspace.zones.player:FindFirstChild("Brine Pool")
            }
            
            game:GetService("ReplicatedStorage").packages.Net:FindFirstChild("RF/SetZone"):InvokeServer(unpack(args))
            Notification:Notify("info", "Teleported", "Successfully teleported to Brine Pool", 3)
        end)
        
        -- Add merchant teleport
        Teleports:AddButton("Teleport to Merchant", function()
            LocalPlayer.Character.HumanoidRootPart.CFrame = CFrame.new(464, 151, 232)
            Notification:Notify("info", "Teleported", "Successfully teleported to Merchant", 3)
        end)

        -- Auto Sell button
        Actions:AddButton("Quick Sell", function()
            game:GetService("ReplicatedStorage").events.Sell:InvokeServer()
            Notification:Notify("info", "Sold", "Items sold successfully", 3)
        end)

        Actions:AddButton("Open/Close Boat UI", function() 
            FischUser.OpenBoatUI()
        end)

        CreditsSection:AddLabel("credit to oggsunny")
        CreditsSection:AddButton(
            "Original by oggsunny",
            function()
                setclipboard("oggsunny")
            end
        )

        Internal.UILoaded = true
    end)
    
    if not success then
        print("UI initialization error: " .. tostring(err))
        Notification:Notify(
            "error",
            "UI Error",
            "Failed to initialize UI. Check console for details.",
            5
        )
    end
end

--Utils
function Utils.Overlap(gui1, gui2)
    local gui1_topLeft = gui1.AbsolutePosition
    local gui1_bottomRight = gui1_topLeft + gui1.AbsoluteSize

    local gui2_topLeft = gui2.AbsolutePosition
    local gui2_bottomRight = gui2_topLeft + gui2.AbsoluteSize
    
    return ((gui1_topLeft.x < gui2_bottomRight.x and gui1_bottomRight.x > gui2_topLeft.x) and (gui1_topLeft.y < gui2_bottomRight.y and gui1_bottomRight.y > gui2_topLeft.y))
end

--VI
VI.State = false

function VI.ClickUI(ui)
    local x = ui.AbsolutePosition.X + (ui.AbsoluteSize.X / 2)
    local y = ui.AbsolutePosition.Y + (ui.AbsoluteSize.Y / 2)
    VIM:SendMouseButtonEvent(x, y, 0, true, game, 0)
    task.wait(0.05)
    VIM:SendMouseButtonEvent(x, y, 0, false, game, 0)
end

function VI.Down(ui)
    VI.State = true
    local x = ui.AbsolutePosition.X + (ui.AbsoluteSize.X / 2)
    local y = ui.AbsolutePosition.Y + (ui.AbsoluteSize.Y / 2)
    VIM:SendMouseButtonEvent(x, y, 0, true, game, 0)
end

function VI.Up(ui)
    VI.State = false
    local x = ui.AbsolutePosition.X + (ui.AbsoluteSize.X / 2)
    local y = ui.AbsolutePosition.Y + (ui.AbsoluteSize.Y / 2)
    VIM:SendMouseButtonEvent(x, y, 0, false, game, 0)
end

--API
function FischAPI.TapShake()
    local shakeUI = game:GetService("Players").LocalPlayer.PlayerGui:FindFirstChild("shakeui")
    if shakeUI and shakeUI.Enabled then
        local safezone = shakeUI:FindFirstChild("safezone")
        if safezone then
            local button = safezone:FindFirstChild("button")
            if button and button:IsA("ImageButton") and button.Visible then
                if Options.AutoShake2 then
                    GuiService.SelectedObject = button
                    VIM:SendKeyEvent(true, Enum.KeyCode.Return, false, game)
                    VIM:SendKeyEvent(false, Enum.KeyCode.Return, false, game)
                end
            end
        end
    end
end

function FischAPI.InstantReel()
    game:GetService("ReplicatedStorage").events.reelfinished:FireServer(100, true)
end

function FischAPI.Cast()
    local player = game.Players.LocalPlayer
    local character = player.Character

    if character then
        -- Find the equipped fishing rod
        local tool = character:FindFirstChildOfClass("Tool")

        if tool then
            -- Check if the tool is already casting (has a bobber)
            local hasBobber = tool:FindFirstChild("bobber")

            if not hasBobber then
                -- Get the cast event
                local castEvent = tool:FindFirstChild("events") and tool.events:FindFirstChild("cast")

                if castEvent then
                    -- Generate a random power between 90-99
                    local power = math.random(90, 99)
                    
                    -- Cast with the random power
                    castEvent:FireServer(power, 1)
                    
                    -- Ensure the character is not anchored
                    local humanoidRootPart = character:FindFirstChild("HumanoidRootPart")
                    if humanoidRootPart then
                        humanoidRootPart.Anchored = false
                    end
                end
            end
        end
    end
end

function FischAPI.SellAll()
    workspace.world.npcs["Marc Merchant"].merchant.sellall:InvokeServer()
end

function FischAPI.AutoSellWithReturn()
    local player = game.Players.LocalPlayer
    local character = player.Character or player.CharacterAdded:Wait()
    local rootPart = character:WaitForChild("HumanoidRootPart")
    local currentPosition = rootPart.CFrame
    local sellPosition = CFrame.new(464, 151, 232)
    
    -- Store whether lock was active
    local wasLockActive = false
    if Options.Lock then
        wasLockActive = true
        Options.Lock = false
    end

    -- Teleport to merchant
    rootPart.CFrame = sellPosition
    task.wait(0.5)

    -- Sell all items
    workspace:WaitForChild("world"):WaitForChild("npcs"):WaitForChild("Marc Merchant"):WaitForChild("merchant"):WaitForChild("sellall"):InvokeServer()

    -- Wait and return to original position
    task.wait(1)
    rootPart.CFrame = currentPosition

    -- Restore lock if it was active
    if wasLockActive then
        Options.Lock = true
    end
end

function FischAPI.GetFish()
    local Text = "Items/Fish:\n"
    for i, v in pairs(game.Players.LocalPlayer.Backpack:GetChildren()) do
        Text=Text..v.Name.."\n"
    end
    return Text
end

--User Functions
function FischUser.Sell()
    FischAPI.SellAll()
end

function FischUser.AutoShake()
    task.wait(Options.AutoShakeDelay)
    FischAPI.TapShake()
end

function FischUser.OpenBoatUI()
    game:GetService("Players").LocalPlayer.PlayerGui.hud.safezone.shipwright.Visible = not game:GetService("Players").LocalPlayer.PlayerGui.hud.safezone.shipwright.Visible
end

function FischUser.LockPosition()
    if Internal.LockedPosition then
        game.Players.LocalPlayer.Character.HumanoidRootPart.Position = Internal.LockedPosition
    end
end

function FischUser.FloatOnWater()
    pcall(function()
        if Internal.FloatPart then
            Internal.FloatPart:Destroy()
        end
    end)
    Internal.FloatPart = Instance.new("Part", workspace)
    Internal.FloatPart.Anchored = true
    Internal.FloatPart.Size = Vector3.new(10,1,10)
    Internal.FloatPart.Position = Vector3.new(game.Players.LocalPlayer.Character.HumanoidRootPart.Position.X, 133.77, game.Players.LocalPlayer.Character.HumanoidRootPart.Position.Z)
    game.Players.LocalPlayer.Character.HumanoidRootPart.Position = Vector3.new(game.Players.LocalPlayer.Character.HumanoidRootPart.Position.X, 150, game.Players.LocalPlayer.Character.HumanoidRootPart.Position.Z)
end

function FischUser.AutoReel()
    FischAPI.InstantReel()
end

function FischUser.AutoCast()
    FischAPI.Cast()
end

function FischUser.AutoSellLoop()
    if Options.AutoSell then
        FischAPI.AutoSellWithReturn()
    end
end

function FischUser.StepLoop()
    if Options.FloatOnWater then
        pcall(function()
            FischUser.FloatOnWater()
        end)
    end
    
    -- Handle auto shake (enter only)
    if Options.AutoShake2 then
        pcall(function()
            FischUser.AutoShake()
        end)
    end
    
    if Options.AutoMinigameBlatant then
        pcall(function()
            FischUser.AutoReel()
        end)
    end
end

function FischUser.Heartbeat()
    -- Position locking with smoother implementation
    if Options.Lock and Internal.LockedPosition then
        pcall(function()
            local character = game.Players.LocalPlayer.Character
            if character and character:FindFirstChild("HumanoidRootPart") then
                local currentPos = character.HumanoidRootPart.Position
                local targetPos = Internal.LockedPosition
                
                -- Only adjust if we've drifted more than a small threshold
                if (currentPos - targetPos).Magnitude > 0.5 then
                    game.Players.LocalPlayer.Character.HumanoidRootPart.Position = targetPos
                end
            end
        end)
    end
end

function FischUser.OneStep()
    -- Empty for now, can be used for future features
end

function FischUser.Relaxed1Sec()
    if Options.AutoCast then
        pcall(function()
            if Options.Lock and Internal.LockedPosition then
                FischUser.LockPosition()
            end
            FischUser.AutoCast()
        end)
    end
end

function FischUser.Initialize()
    -- Set up the main loops
    spawn(function()
        game:GetService("RunService").RenderStepped:Connect(function()
            pcall(function()
                FischUser.Heartbeat()
            end)
        end)
    end)
    
    spawn(function()
        FischUser.OneStep()
    end)
    
    spawn(function()
        while task.wait(0.005) do
            pcall(function()
                FischUser.StepLoop()
            end)
        end
    end)
    
    spawn(function()
        while task.wait(1) do
            pcall(function()
                FischUser.Relaxed1Sec()
            end)
        end
    end)
    
    spawn(function()
        while task.wait(Options.AutoSellDelay * 60) do
            pcall(function()
                FischUser.AutoSellLoop()
            end)
        end
    end)
    
    -- Initialize UI with delay to ensure game has loaded
    spawn(function()
        wait(2) -- Give game time to fully load
        pcall(function()
            UI.Initialize()
        end)
    end)
end

-- Added UI initialization error handling
pcall(function()
    Notification:Notify(
        "info",
        "Fisch Script Loading",
        "Script combined - credit to oggsunny",
        5
    )
end)

-- Start everything with error handling
pcall(function()
    FischUser.Initialize()
end)

-- Delayed UI initialization as a backup
spawn(function()
    wait(5)
    if not Internal.UILoaded then
        pcall(function()
            UI.Initialize()
            Notification:Notify(
                "info",
                "UI Loaded",
                "Interface initialized via backup method - credit to oggsunny",
                3
            )
        end)
    end
end)

return FischAPI
