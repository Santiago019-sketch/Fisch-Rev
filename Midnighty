-- Initialize Variables
local LocalPlayer = game.Players.LocalPlayer
local AutoFish, AutoSell = false, false
local waittime = 0.001
local sellCooldown = 5
local fishCount, startTime, lastSellTime = 0, os.time(), 0
local Finished, Progress = false, false

-- Wait for game to load fully
if not game:IsLoaded() then
    game.Loaded:Wait()
end

-- Initialize UI Library with better error handling
local Fluent
local function loadFluent()
    local success, result = pcall(function()
        return loadstring(game:HttpGet("https://github.com/dawid-scripts/Fluent/releases/latest/download/main.lua"))()
    end)
    
    if success then
        return result
    else
        warn("Failed to load Fluent library: " .. tostring(result))
        -- Attempt secondary source as fallback
        success, result = pcall(function()
            return loadstring(game:HttpGet("https://raw.githubusercontent.com/dawid-scripts/Fluent/master/source.lua"))()
        end)
        
        if success then
            return result
        else
            warn("Failed to load Fluent library from fallback: " .. tostring(result))
            return nil
        end
    end
end

Fluent = loadFluent()

if not Fluent then
    warn("Critical error: Unable to load UI library. Script cannot continue.")
    return
end

-- Load addons with better error handling
local SaveManager
local function loadSaveManager()
    local success, result = pcall(function()
        return loadstring(game:HttpGet("https://raw.githubusercontent.com/dawid-scripts/Fluent/master/Addons/SaveManager.lua"))()
    end)
    
    if success then
        return result
    else
        warn("Failed to load SaveManager: " .. tostring(result))
        return nil
    end
end

SaveManager = loadSaveManager()

local InterfaceManager
local function loadInterfaceManager()
    local success, result = pcall(function()
        return loadstring(game:HttpGet("https://raw.githubusercontent.com/dawid-scripts/Fluent/master/Addons/InterfaceManager.lua"))()
    end)
    
    if success then
        return result
    else
        warn("Failed to load InterfaceManager: " .. tostring(result))
        return nil
    end
end

InterfaceManager = loadInterfaceManager()

-- Create Window
local Window = Fluent:CreateWindow({
    Title = "Fishing Simulator GUI",
    SubTitle = "by Gatra10_",
    TabWidth = 160,
    Size = UDim2.fromOffset(580, 460),
    Acrylic = false, -- No blur to prevent detection
    Theme = "Dark",
    MinimizeKey = Enum.KeyCode.LeftControl
})

-- Create Tabs
local Tabs = {
    AutoFish = Window:AddTab({
        Title = "Auto Fish",
        Icon = "fish"
    }),
    Teleports = Window:AddTab({
        Title = "Teleports",
        Icon = "map-pin"
    }),
    Sells = Window:AddTab({
        Title = "Sells",
        Icon = "shopping-cart"
    }),
    Misc = Window:AddTab({
        Title = "Misc",
        Icon = "settings"
    })
}

-- Notification Function
function ShowNotification(title, content)
    Fluent:Notify({
        Title = title,
        Content = content,
        Duration = 3
    })
end

-- Teleports
local SelectedIsland = "Moosewood"
local IslandTPDropdownUI = Tabs.Teleports:AddDropdown("IslandTPDropdownUI", {
    Title = "Select an Island",
    Values = {"Moosewood", "Roslit Bay", "Terrapin", "Sunstone", "Statue of Sovereignty", "Mushgrove Swamp", "Snowcap", "Vertigo", "Keepers Altar", "The Arch", "Desolate Deep"},
    Multi = false,
    Default = 1,
})

IslandTPDropdownUI:OnChanged(function(Value)
    SelectedIsland = Value
end)

Tabs.Teleports:AddButton({
    Title = "Teleport to Island",
    Callback = function()
        local locations = {
            ["Moosewood"] = CFrame.new(382.893, 134.501, 242.632),
            ["Roslit Bay"] = CFrame.new(game:GetService("Workspace").world.spawns.TpSpots.roslit.Position),
            ["Terrapin"] = CFrame.new(-146.693, 144.931, 1903.16),
            ["Sunstone"] = CFrame.new(game:GetService("Workspace").world.spawns.TpSpots.sunstone.Position),
            ["Statue of Sovereignty"] = CFrame.new(game:GetService("Workspace").world.spawns.TpSpots.statue.Position),
            ["Mushgrove Swamp"] = CFrame.new(game:GetService("Workspace").world.spawns.TpSpots.mushgrove.Position),
            ["Snowcap"] = CFrame.new(game:GetService("Workspace").world.spawns.TpSpots.snowcap.Position),
            ["Vertigo"] = CFrame.new(game:GetService("Workspace").world.spawns.TpSpots.vertigo.Position),
            ["Keepers Altar"] = CFrame.new(1317.79, -805.292, -111.615),
            ["The Arch"] = CFrame.new(game:GetService("Workspace").world.spawns.TpSpots.arch.Position),
            ["Desolate Deep"] = CFrame.new(-1525.859, -234.701, -2856.092),
        }

        if locations[SelectedIsland] then
            -- Add error handling for teleports
            local success, error = pcall(function()
                if LocalPlayer.Character and LocalPlayer.Character:FindFirstChild("HumanoidRootPart") then
                    LocalPlayer.Character.HumanoidRootPart.CFrame = locations[SelectedIsland]
                else
                    error("Character or HumanoidRootPart not found")
                end
            end)
            
            if success then
                ShowNotification("Teleported", "Successfully teleported to " .. SelectedIsland)
            else
                ShowNotification("Error", "Failed to teleport: " .. tostring(error))
            end
        else
            ShowNotification("Error", "Location not found!")
        end
    end
})

-- World Event Teleports
local SelectedWorldEvent = "Traveler Merchant"
local WorldEventTPDropdownUI = Tabs.Teleports:AddDropdown("WorldEventTPDropdownUI", {
    Title = "Select a World Event",
    Values = {"Traveler Merchant", "Strange Whirlpool"},
    Multi = false,
    Default = 1,
})

WorldEventTPDropdownUI:OnChanged(function(Value)
    SelectedWorldEvent = Value
end)

Tabs.Teleports:AddButton({
    Title = "Teleport to World Event",
    Callback = function()
        local success, error = pcall(function()
            if SelectedWorldEvent == "Traveler Merchant" then
                if game.Workspace.active:FindFirstChild("Merchant Boat") then
                    LocalPlayer.Character.HumanoidRootPart.CFrame = CFrame.new(game.Workspace.active["Merchant Boat"].Boat["Merchant Boat"].r.HandlesR.Position)
                else
                    ShowNotification("Error", "Merchant Boat not found in the world!")
                    return
                end
            elseif SelectedWorldEvent == "Strange Whirlpool" then
                if game.Workspace.zones.fishing:FindFirstChild("Isonade") then
                    local offset = Vector3.new(0, 125, 0)
                    LocalPlayer.Character.HumanoidRootPart.CFrame = CFrame.new(game.Workspace.zones.fishing.Isonade.Position + offset)
                else
                    ShowNotification("Error", "Whirlpool not found in the world!")
                    return
                end
            end
        end)
        
        if success then
            ShowNotification("Teleported", "Successfully teleported to " .. SelectedWorldEvent)
        else
            ShowNotification("Error", "Failed to teleport: " .. tostring(error))
        end
    end
})

Tabs.Teleports:AddButton({
    Title = "Teleport to Trident",
    Callback = function()
        local success, error = pcall(function()
            LocalPlayer.Character.HumanoidRootPart.CFrame = CFrame.new(-1483.99304, -225.975464, -2201.59741)
        end)
        
        if success then
            ShowNotification("Teleported", "Successfully teleported to Trident")
        else
            ShowNotification("Error", "Failed to teleport: " .. tostring(error))
        end
    end
})

-- Sell Tab
Tabs.Sells:AddButton({
    Title = "Sell All Fish",
    Callback = function()
        local success, error = pcall(function()
            workspace:WaitForChild("world"):WaitForChild("npcs"):WaitForChild("Marc Merchant"):WaitForChild("merchant"):WaitForChild("sellall"):InvokeServer()
        end)
        
        if success then
            ShowNotification("Sold", "All fish have been sold.")
        else
            ShowNotification("Error", "Failed to sell fish: " .. tostring(error))
        end
    end
})

Tabs.Sells:AddButton({
    Title = "Sell Equipped Fish",
    Callback = function()
        local success, error = pcall(function()
            workspace:WaitForChild("world"):WaitForChild("npcs"):WaitForChild("Marc Merchant"):WaitForChild("merchant"):WaitForChild("sell"):InvokeServer()
        end)
        
        if success then
            ShowNotification("Sold", "Equipped fish has been sold.")
        else
            ShowNotification("Error", "Failed to sell equipped fish: " .. tostring(error))
        end
    end
})

-- Auto Sell Feature
Tabs.Sells:AddToggle("AutoSellToggle", {
    Title = "Enable Auto Sell",
    Default = false,
    Callback = function(Value)
        AutoSell = Value
        
        -- Auto sell loop
        if AutoSell then
            spawn(function()
                while AutoSell do
                    if os.time() - lastSellTime >= sellCooldown then
                        local success, error = pcall(function()
                            workspace:WaitForChild("world"):WaitForChild("npcs"):WaitForChild("Marc Merchant"):WaitForChild("merchant"):WaitForChild("sellall"):InvokeServer()
                        end)
                        
                        if success then
                            lastSellTime = os.time()
                            ShowNotification("Auto Sell", "Fish sold automatically.")
                        else
                            -- Don't show error every time, it gets annoying
                            -- ShowNotification("Auto Sell Error", "Failed to sell fish: " .. tostring(error))
                        end
                    end
                    wait(1)
                end
            end)
        end
    end
})

Tabs.Sells:AddSlider("SellCooldownSlider", {
    Title = "Sell Cooldown (seconds)",
    Min = 1,
    Max = 60,
    Default = 5,
    Rounding = 0,
    Callback = function(Value)
        sellCooldown = Value
    end
})

-- Auto Fish Tab
local AutoFishing = false

-- Function to check if an item is a fishing rod
local function isRod(item)
    -- Common fishing rod patterns
    local rodPatterns = {
        "rod", "Rod", "fishing", "Fishing", "pole", "Pole", "caster", "Caster"
    }
    
    if item and item:IsA("Tool") then
        for _, pattern in ipairs(rodPatterns) do
            if string.find(item.Name, pattern) then
                return true
            end
        end
    end
    
    return false
end

-- Function to get the currently equipped rod
local function getEquippedRod()
    -- Check if any equipped item is a rod
    if LocalPlayer.Character then
        for _, item in pairs(LocalPlayer.Character:GetChildren()) do
            if item:IsA("Tool") and isRod(item) then
                return item
            end
        end
    end
    return nil
end

-- Get all remotes in game
local function getAllFishingRemotes()
    local fishingRemotes = {}
    
    -- Check ReplicatedStorage
    local repStorage = game:GetService("ReplicatedStorage")
    
    -- Common remote paths for fishing games
    local possiblePaths = {
        repStorage:FindFirstChild("FishingSystem"),
        repStorage:FindFirstChild("events"),
        repStorage:FindFirstChild("Remotes"),
        repStorage:FindFirstChild("Network"),
        repStorage:FindFirstChild("Fishing")
    }
    
    -- Check all possible paths
    for _, path in pairs(possiblePaths) do
        if path then
            for _, remote in pairs(path:GetDescendants()) do
                if remote:IsA("RemoteEvent") or remote:IsA("RemoteFunction") then
                    table.insert(fishingRemotes, remote)
                end
            end
        end
    end
    
    return fishingRemotes
end

-- Universal fishing function with retry mechanism
local function universalFish()
    -- Get currently equipped rod
    local equippedRod = getEquippedRod()
    
    if not equippedRod then
        -- No rod equipped, try to equip one from backpack
        for _, item in pairs(LocalPlayer.Backpack:GetChildren()) do
            if isRod(item) then
                -- Safely equip the rod
                pcall(function()
                    item.Parent = LocalPlayer.Character
                end)
                ShowNotification("Fishing", "Equipped " .. item.Name)
                wait(0.5) -- Wait for equip animation
                equippedRod = item
                break
            end
        end
    end
    
    if equippedRod then
        ShowNotification("Fishing", "Using " .. equippedRod.Name)
        
        -- Try multiple fishing methods
        local fishSuccess = false
        
        -- Method 1: Try rod-specific events
        if not fishSuccess and equippedRod:FindFirstChild("events") then
            local events = equippedRod.events:GetChildren()
            for _, event in pairs(events) do
                if string.find(string.lower(event.Name), "cast") then
                    local success, error = pcall(function()
                        event:FireServer(81.6, 1) -- Common cast arguments
                    end)
                    
                    if success then
                        fishSuccess = true
                        wait(3) -- Wait for fish to bite
                        
                        -- Try to reel in
                        for _, reelEvent in pairs(events) do
                            if string.find(string.lower(reelEvent.Name), "reel") then
                                pcall(function()
                                    reelEvent:FireServer(100, false)
                                end)
                            end
                        end
                    end
                end
            end
        end
        
        -- Method 2: Try game fishing system
        if not fishSuccess then
            local fishingSystem = game:GetService("ReplicatedStorage"):FindFirstChild("FishingSystem")
            if fishingSystem then
                local success, error = pcall(function()
                    local castRod = fishingSystem:FindFirstChild("CastRod")
                    if castRod and castRod:IsA("RemoteFunction") then
                        castRod:InvokeServer()
                        wait(3) -- Wait for fish to bite
                        
                        local reelIn = fishingSystem:FindFirstChild("ReelIn")
                        if reelIn and reelIn:IsA("RemoteFunction") then
                            reelIn:InvokeServer()
                        end
                    end
                end)
                
                if success then
                    fishSuccess = true
                end
            end
        end
        
        -- Method 3: Try common remote names in ReplicatedStorage
        if not fishSuccess then
            local allRemotes = getAllFishingRemotes()
            
            -- Try to find cast remote
            for _, remote in pairs(allRemotes) do
                if string.find(string.lower(remote.Name), "cast") or string.find(string.lower(remote.Name), "throw") then
                    local success, error = pcall(function()
                        if remote:IsA("RemoteFunction") then
                            remote:InvokeServer()
                        else
                            remote:FireServer()
                        end
                    end)
                    
                    if success then
                        wait(3) -- Wait for fish to bite
                        
                        -- Try to find reel remote
                        for _, reelRemote in pairs(allRemotes) do
                            if string.find(string.lower(reelRemote.Name), "reel") or string.find(string.lower(reelRemote.Name), "catch") then
                                pcall(function()
                                    if reelRemote:IsA("RemoteFunction") then
                                        reelRemote:InvokeServer()
                                    else
                                        reelRemote:FireServer()
                                    end
                                end)
                                fishSuccess = true
                                break
                            end
                        end
                    end
                    
                    if fishSuccess then break end
                end
            end
        end
        
        if fishSuccess then
            return true
        else
            ShowNotification("Fishing Error", "Failed to fish with current method")
            return false
        end
    else
        ShowNotification("Error", "No fishing rod found!")
        return false
    end
end

Tabs.AutoFish:AddToggle("AutoFishToggle", {
    Title = "Enable Auto Fishing",
    Default = false,
    Callback = function(Value)
        AutoFishing = Value
        startTime = os.time() -- Reset the timer
        fishCount = 0 -- Reset fish count
        
        -- Auto fishing loop
        if AutoFishing then
            spawn(function()
                while AutoFishing do
                    local success = universalFish()
                    if success then
                        fishCount = fishCount + 1
                    end
                    wait(waittime)
                end
            end)
        end
    end
})

Tabs.AutoFish:AddSlider("AutoFishDelay", {
    Title = "Fishing Delay",
    Min = 0.001,
    Max = 5,
    Default = 0.5, -- Increased default for better reliability
    Rounding = 3,
    Callback = function(Value)
        waittime = Value
    end
})

-- Stats display
local StatsSection = Tabs.AutoFish:AddSection("Fishing Stats")

-- Stats labels
local FishCountLabel = Tabs.AutoFish:AddLabel("Fish Caught: 0")
local TimeElapsedLabel = Tabs.AutoFish:AddLabel("Time Elapsed: 00:00:00")
local FishPerMinuteLabel = Tabs.AutoFish:AddLabel("Fish Per Minute: 0")

-- Update stats every second
spawn(function()
    while wait(1) do
        if AutoFishing then
            local timeElapsed = os.time() - startTime
            local hours = math.floor(timeElapsed / 3600)
            local minutes = math.floor((timeElapsed % 3600) / 60)
            local seconds = timeElapsed % 60
            local timeString = string.format("%02d:%02d:%02d", hours, minutes, seconds)
            
            local fishPerMinute = 0
            if timeElapsed > 0 then
                fishPerMinute = math.floor((fishCount / timeElapsed) * 60)
            end
            
            FishCountLabel:Set("Fish Caught: " .. fishCount)
            TimeElapsedLabel:Set("Time Elapsed: " .. timeString)
            FishPerMinuteLabel:Set("Fish Per Minute: " .. fishPerMinute)
        end
    end
end)

-- Rod detection helper
Tabs.AutoFish:AddButton({
    Title = "Find Equipped Rod Info",
    Callback = function()
        local equippedRod = nil
        
        -- Check if any equipped item is a rod
        for _, item in pairs(LocalPlayer.Character:GetChildren()) do
            if item:IsA("Tool") then
                equippedRod = item
                break
            end
        end
        
        if equippedRod then
            ShowNotification("Rod Info", "Found rod: " .. equippedRod.Name)
            
            -- Log rod details to help debug
            print("==== ROD DETAILS ====")
            print("Rod Name: " .. equippedRod.Name)
            
            -- Check for events
            if equippedRod:FindFirstChild("events") then
                print("Events found:")
                for _, event in pairs(equippedRod.events:GetChildren()) do
                    print("- " .. event.Name)
                end
            else
                print("No events folder found")
            end
            
            -- Check ReplicatedStorage for related events
            local repStorage = game:GetService("ReplicatedStorage")
            
            -- Check common fishing remote paths
            local commonPaths = {
                repStorage:FindFirstChild("FishingSystem"),
                repStorage:FindFirstChild("events"),
                repStorage:FindFirstChild("Remotes"),
                repStorage:FindFirstChild("Network"),
                repStorage:FindFirstChild("Fishing")
            }
            
            print("\nReplicatedStorage fishing remotes:")
            for _, path in pairs(commonPaths) do
                if path then
                    for _, remote in pairs(path:GetDescendants()) do
                        if remote:IsA("RemoteEvent") or remote:IsA("RemoteFunction") then
                            print("- " .. remote:GetFullName())
                        end
                    end
                end
            end
            
            print("==== END ROD DETAILS ====")
        else
            ShowNotification("Error", "No rod equipped!")
        end
    end
})

-- Find all fishing remotes button
Tabs.AutoFish:AddButton({
    Title = "Find All Fishing Remotes",
    Callback = function()
        local remotes = getAllFishingRemotes()
        print("==== FISHING REMOTES ====")
        for i, remote in ipairs(remotes) do
            print(i .. ". " .. remote:GetFullName())
        end
        print("==== END FISHING REMOTES ====")
        ShowNotification("Remotes", "Found " .. #remotes .. " possible fishing remotes. Check console (F9).")
    end
})

-- Find fishing game type
Tabs.Misc:AddButton({
    Title = "Detect Fishing Game Type",
    Callback = function()
        -- Common structures in fishing games
        local gameTypes = {
            {name = "Standard Fishing Simulator", check = function() 
                return game:GetService("ReplicatedStorage"):FindFirstChild("FishingSystem") ~= nil 
            end},
            {name = "Fishing Simulator", check = function() 
                return workspace:FindFirstChild("world") and workspace.world:FindFirstChild("npcs") 
            end},
            {name = "Ultimate Fishing Simulator", check = function() 
                return game:GetService("ReplicatedStorage"):FindFirstChild("Network") and 
                       game:GetService("ReplicatedStorage").Network:FindFirstChild("Fish") 
            end},
            {name = "Fishing Adventure", check = function() 
                return game:GetService("ReplicatedStorage"):FindFirstChild("Remotes") and 
                       game:GetService("ReplicatedStorage").Remotes:FindFirstChild("FishCaught") 
            end}
        }
        
        local detectedType = "Unknown Fishing Game"
        
        for _, gameType in ipairs(gameTypes) do
            if gameType.check() then
                detectedType = gameType.name
                break
            end
        end
        
        ShowNotification("Game Type", "Detected: " .. detectedType)
        print("Game type: " .. detectedType)
    end
})

-- Misc Tab
Tabs.Misc:AddButton({
    Title = "Infinite Yield",
    Callback = function()
        local success, error = pcall(function()
            loadstring(game:HttpGet('https://raw.githubusercontent.com/EdgeIY/infiniteyield/master/source'))()
        end)
        
        if success then
            ShowNotification("Loaded", "Infinite Yield admin commands loaded")
        else
            ShowNotification("Error", "Failed to load Infinite Yield: " .. tostring(error))
        end
    end
})

Tabs.Misc:AddButton({
    Title = "Reset Character",
    Callback = function()
        pcall(function()
            LocalPlayer.Character:BreakJoints()
        end)
        ShowNotification("Reset", "Character has been reset")
    end
})

Tabs.Misc:AddSlider("WalkSpeedSlider", {
    Title = "Walk Speed",
    Min = 16,
    Max = 500,
    Default = 16,
    Rounding = 0,
    Callback = function(Value)
        pcall(function()
            if LocalPlayer.Character and LocalPlayer.Character:FindFirstChild("Humanoid") then
                LocalPlayer.Character.Humanoid.WalkSpeed = Value
            end
        end)
    end
})

Tabs.Misc:AddSlider("JumpPowerSlider", {
    Title = "Jump Power",
    Min = 50,
    Max = 500,
    Default = 50,
    Rounding = 0,
    Callback = function(Value)
        pcall(function()
            if LocalPlayer.Character and LocalPlayer.Character:FindFirstChild("Humanoid") then
                LocalPlayer.Character.Humanoid.JumpPower = Value
            end
        end)
    end
})

-- Anti-AFK
local AntiAFK = Tabs.Misc:AddToggle("AntiAFKToggle", {
    Title = "Anti-AFK",
    Default = true,
    Callback = function(Value)
        if Value then
            local VirtualUser = game:GetService("VirtualUser")
            LocalPlayer.Idled:Connect(function()
                VirtualUser:CaptureController()
                VirtualUser:ClickButton2(Vector2.new())
                ShowNotification("Anti-AFK", "Prevented AFK kick")
            end)
            ShowNotification("Anti-AFK", "Anti-AFK system enabled")
        end
    end
})

-- Safe initialization of SaveManager and InterfaceManager
if SaveManager then
    SaveManager:SetLibrary(Fluent)
    SaveManager:IgnoreThemeSettings()
    SaveManager:SetIgnoreIndexes({"MinimizeKey"})
    SaveManager:SetFolder("FishingSimulator/Configs")
    
    if Tabs.Misc then
        SaveManager:BuildConfigSection(Tabs.Misc)
    end

    -- Load configs
    pcall(function()
        SaveManager:LoadAutoloadConfig()
    end)
end

if InterfaceManager then
    InterfaceManager:SetLibrary(Fluent)
    InterfaceManager:SetFolder("FishingSimulator")
    
    if Tabs.Misc then
        InterfaceManager:BuildInterfaceSection(Tabs.Misc)
    end
end

-- Initial notification
ShowNotification("GUI Loaded", "Universal Fishing Simulator GUI is ready!")
