-- Fixed Fichy47 Fishing Script by oggsunny (modified)

local FischAPI = {}

local VIM = game:GetService("VirtualInputManager")
local GuiService = game:GetService("GuiService")
local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local HttpService = game:GetService("HttpService")

local VI = {}
local player = Players.LocalPlayer

-- Debug function to help identify issues
local function debug(msg)
    print("[Fichy47 Debug] " .. tostring(msg))
end

debug("Script starting")

local Options = {
    AutoShake = false,
    AutoShake2 = false,
    AutoShake3 = false,
    AutoShakeDelay = 0.3,
    AutoMinigame = false,
    AutoMinigameBlatant = false,
    AutoCast = false,
    PerfectCast = false,
    WebhookURL = "",
    WebhookNotifications = false,
    FloatOnWater = false,
    Lock = false,
    MegaladonHunting = false,
    AutoSell = false,
    AutoSellDelay = 3
}

local Internal = {
    AutoMinigameDownPerUp = 2,
    AutoMinigameDownPerUpInternal = 2,
    Timer = 301,
    FloatPart = nil,
    LockedPosition = nil,
    MegaladonPosition = nil,
    Megaladon = false,
    MegHuntPlat = nil,
    MegHuntPos = nil,
    CurrentRod = nil,
    UILoaded = false
}

local Utils = {}
local UI = {}
local CalibrationData = {
    Positions = {
        ["Spawn"] = Vector3.new(476, 151, 233),
        ["Fishing Dock"] = Vector3.new(464, 137, 269)
        -- Add more positions as needed
    }
}
local FischUser = {}

-- Safely load the NEVERLOSE UI library with error handling
local NEVERLOSE, loadError
local success, result = pcall(function()
    return loadstring(game:HttpGet("https://raw.githubusercontent.com/IayZBoy/TrollScripts/main/randomuilib.lua"))()
end)

if success then
    NEVERLOSE = result
    debug("UI Library loaded successfully")
else
    loadError = result
    debug("Failed to load UI Library: " .. tostring(loadError))
    -- Create a fallback notification function
    NEVERLOSE = {
        Notification = function()
            return {
                Notify = function(self, type, title, message, duration)
                    print("[" .. type .. "] " .. title .. ": " .. message)
                end
            }
        end,
        Theme = function(_, theme) 
            print("Theme set to: " .. theme)
        end,
        AddWindow = function(_, title, subtitle)
            print("Created window: " .. title .. " - " .. subtitle)
            return {
                AddTab = function(_, name, icon)
                    print("Created tab: " .. name)
                    return {
                        AddSection = function(_, sectionName, position)
                            print("Created section: " .. sectionName .. " at " .. position)
                            return {
                                AddToggle = function(_, name, defaultValue, callback)
                                    print("Created toggle: " .. name .. " (default: " .. tostring(defaultValue) .. ")")
                                    return {}
                                end,
                                AddButton = function(_, name, callback)
                                    print("Created button: " .. name)
                                    return {}
                                end,
                                AddLabel = function(_, text)
                                    print("Created label: " .. text)
                                    return {
                                        Text = function(_, newText)
                                            print("Updated label to: " .. newText)
                                        end
                                    }
                                end,
                                AddSlider = function(_, name, min, max, default, step, callback)
                                    print("Created slider: " .. name .. " (" .. min .. "-" .. max .. ", default: " .. default .. ")")
                                    return {}
                                end,
                                AddTextBox = function(_, name, default, callback)
                                    print("Created textbox: " .. name)
                                    return {}
                                end,
                                AddDropdown = function(_, name, options, default, callback)
                                    print("Created dropdown: " .. name)
                                    return {
                                        Refresh = function(_, newOptions)
                                            print("Refreshed dropdown options")
                                        end
                                    }
                                end
                            }
                        end
                    }
                end
            }
        end
    }
end

local Notification = NEVERLOSE.Notification();
NEVERLOSE:Theme("dark")

--UI
for Setting, Value in pairs(Options) do
    if type(Value) == "boolean" then
        UI[Setting] = function(Val)
            Options[Setting] = Val
            debug("Setting " .. Setting .. " to " .. tostring(Val))
        end
    end
end

function UI.Initialize()
    debug("Initializing UI")
    
    -- Check if UI is already loaded
    if Internal.UILoaded then
        debug("UI already loaded, skipping initialization")
        return
    end
    
    --UI
    local Windows = NEVERLOSE:AddWindow("oggsunny","oggsunny - Fisch - V0.0.2 - discord.gg/fichy47")

    local FishingTab = Windows:AddTab("Fishing", "earth")
    local Interactions = Windows:AddTab("Interactions", "list")
    local AreaTeleportsTab = Windows:AddTab("Area Teleports", "earth")
    local MegaladonHunting = Windows:AddTab("Megaladon Hunting", "earth")
    local WebhookTab = Windows:AddTab("Webhook", "list")

    local MechanicsSection = FishingTab:AddSection("Mechanics", "left")
    local Convenience = FishingTab:AddSection("Convenience", "left")
    local CreditsSection = FishingTab:AddSection("Credits", "right")
    local Teleports = AreaTeleportsTab:AddSection("Teleports", "left")
    local Actions = Interactions:AddSection("Actions", "left")
    local WebhookSection = WebhookTab:AddSection("Webhook", "left")
    local SellSection = Interactions:AddSection("Auto Sell", "right")

    SellSection:AddToggle("Auto Sell", false, UI.AutoSell)
    
    SellSection:AddSlider("Auto Sell Delay (min)", 1, 30, 3, 1, function(value)
        Options.AutoSellDelay = value
        debug("Set AutoSellDelay to " .. tostring(value))
    end)

    Actions:AddButton("Sell All", FischUser.Sell)

    Convenience:AddToggle("Float On Water", false, UI.FloatOnWater)

    Convenience:AddLabel("Turn ON to walk around and choose spot.")
    
    Convenience:AddLabel("Turn OFF to choose your position.")

    Convenience:AddToggle("Lock Position", false, function(v) 
        Internal.LockedPosition = player.Character and player.Character:FindFirstChild("HumanoidRootPart") and player.Character.HumanoidRootPart.Position or Vector3.new(0,0,0)
        debug("Lock position set to: " .. tostring(Internal.LockedPosition))
        UI.Lock(v) 
    end)

    -- Updated AutoShake options
    MechanicsSection:AddToggle("Auto Shake (Click)", false, UI.AutoShake)
    
    MechanicsSection:AddToggle("Auto Shake (Enter)", false, UI.AutoShake2)
    
    MechanicsSection:AddToggle("Fast Auto Shake Mode", false, UI.AutoShake3)
    
    MechanicsSection:AddSlider("Auto Shake Delay", 0.1, 1, 0.3, 0.1, function(value)
        Options.AutoShakeDelay = value
        debug("Set AutoShakeDelay to " .. tostring(value))
    end)

    MechanicsSection:AddToggle("Auto Reel (Blatant)", false, UI.AutoMinigameBlatant)

    MechanicsSection:AddToggle("Auto Cast", false, UI.AutoCast)

    WebhookSection:AddTextBox(
        "Webhook URL", 
        "", 
        function(text)
            Options.WebhookURL = text
            Notification:Notify("info", "Set Webhook Successfully", "Set webhook to "..text, 5)
        end
    )

    WebhookSection:AddToggle(
        "Send Webhook Notifications",
        false,
        UI.WebhookNotifications
    )

    for Place, Position in pairs(CalibrationData.Positions) do
        Teleports:AddButton(
            "Teleport to "..Place,
            function()
                if player.Character and player.Character:FindFirstChild("HumanoidRootPart") then
                    player.Character.HumanoidRootPart.Position = Position
                    debug("Teleported to " .. Place)
                else
                    debug("Cannot teleport - character or HumanoidRootPart not found")
                end
            end
        )
    end

    local MegHunt = MegaladonHunting:AddSection("Hunting", "left")

    local HuntOrNo = MegHunt:AddToggle("Hunt Megaladon", false, UI.MegaladonHunting)

    MegHunt:AddLabel("If a Megaladon is spotted within the server,")
    MegHunt:AddLabel("it will override all options and")
    MegHunt:AddLabel("hunt for it.")
    MegHunt:AddLabel("It will go back to normal once you or someone else")
    MegHunt:AddLabel("has caught it.")

    Actions:AddButton("Open/Close Boat UI", function() 
        FischUser.OpenBoatUI()
    end)

    CreditsSection:AddLabel("Fichy47 Script by dynamicarrays")
    CreditsSection:AddButton(
        "Discord",
        function()
            pcall(function()
                setclipboard("discord.gg/fichy47")
                Notification:Notify("info", "Copied Discord", "discord.gg/fichy47", 3)
            end)
        end
    )

    local AbundanceZoneSection = FishingTab:AddSection("Abundances", "right")
    
    local Ab = {}
    local Ab2 = {}
    local Choice = nil
    local LabeledChance = nil

    local AbundanceChoice = AbundanceZoneSection:AddDropdown("Abundances", Ab, "Loading", function(D)
        if Ab2[D] then
            LabeledChance:Text("Chance: "..tostring(Ab2[D].Chance).."%")
            Choice = Ab2[D]
            debug("Selected abundance: " .. D .. " with chance " .. tostring(Ab2[D].Chance) .. "%")
        else
            debug("Selected abundance not found in Ab2 table")
        end
    end)

    LabeledChance = AbundanceZoneSection:AddLabel("Chance: 0%")

    local GotoAbundance = AbundanceZoneSection:AddButton("Go to Abundance", function() 
        if Choice and player.Character and player.Character:FindFirstChild("HumanoidRootPart") then
            player.Character.HumanoidRootPart.Position = Vector3.new(Choice.Position.X, 137.77, Choice.Position.Z)
            debug("Teleported to abundance zone at " .. tostring(Choice.Position))
        else
            debug("Cannot teleport to abundance - Choice or character not found")
        end
    end)

    -- Create scrolling space
    for i = 1, 10 do  -- Reduced from 100 to improve performance
        FishingTab:AddSection("Scrolling Space " .. i, "right")
    end

    -- Mark UI as loaded
    Internal.UILoaded = true
    
    spawn(function()
        debug("Starting abundance zone update loop")
        while task.wait(5) do
            pcall(function()
                local Places = FischAPI.GetAllAbundanceZones()
                Ab2 = Places
                Ab = {}
                local FoundMeg = false
                for Fish, Info in pairs(Ab2) do
                    if string.match(tostring(Fish), "Megalodon") then
                        Internal.Megaladon = true
                        FoundMeg = true
                        Internal.MegaladonPosition = Info.Position
                        debug("Found Megalodon at " .. tostring(Info.Position))
                    end
                    table.insert(Ab, Fish)
                end
                if FoundMeg == false then
                    Internal.Megaladon = false
                    Internal.MegaladonPosition = nil
                    pcall(function()  
                        if Internal.MegHuntPlat then
                            Internal.MegHuntPlat:Destroy()
                            Internal.MegHuntPlat = nil
                        end
                    end)
                end
                pcall(function()
                    AbundanceChoice:Refresh(Ab)
                end)
            end)
        end
    end)
    
    debug("UI initialization complete")
end

--Utils
function Utils.Overlap(gui1, gui2)
    if not gui1 or not gui2 then return false end
    
    local gui1_topLeft = gui1.AbsolutePosition
    local gui1_bottomRight = gui1_topLeft + gui1.AbsoluteSize

    local gui2_topLeft = gui2.AbsolutePosition
    local gui2_bottomRight = gui2_topLeft + gui2.AbsoluteSize
    
    return ((gui1_topLeft.X < gui2_bottomRight.X and gui1_bottomRight.X > gui2_topLeft.X) and (gui1_topLeft.Y < gui2_bottomRight.Y and gui1_bottomRight.Y > gui2_topLeft.Y))
end

function Utils.SendWebhookData(Link, Text)
    if not Link or Link == "" then
        debug("Webhook URL is empty, cannot send data")
        return
    end
    
    local DataForm = Text
    local maxLength = 1950
    local chunks = {}

    while #DataForm > 0 do
        local chunk = DataForm:sub(1, maxLength)
        if #DataForm > maxLength then
            local lastNewline = chunk:match(".*\n()")
            if lastNewline then
                chunk = DataForm:sub(1, lastNewline - 1)
            end
        end
        table.insert(chunks, chunk)
        DataForm = DataForm:sub(#chunk + 1)
    end

    for i, chunk in ipairs(chunks) do
        local data = {
            content = chunk
        }
        
        pcall(function()
            request({
                Url = Link,
                Method = "POST",
                Headers = {
                    ["Content-Type"] = "application/json"
                },
                Body = HttpService:JSONEncode(data)
            })
        end)
    end
    
    debug("Webhook data sent to " .. Link)
end

--VI
VI.State = false

function VI.ClickUI(ui)
    if not ui then 
        debug("Cannot click UI - UI element is nil")
        return
    end
    
    local x = ui.AbsolutePosition.X + (ui.AbsoluteSize.X / 2)
    local y = ui.AbsolutePosition.Y + (ui.AbsoluteSize.Y / 2)
    VIM:SendMouseButtonEvent(x, y, 0, true, game, 0)
    task.wait(0.05)
    VIM:SendMouseButtonEvent(x, y, 0, false, game, 0)
    debug("Clicked UI element at position X:" .. x .. " Y:" .. y)
end

function VI.Down(ui)
    if not ui then
        debug("Cannot press down UI - UI element is nil")
        return
    end
    
    VI.State = true
    local x = ui.AbsolutePosition.X + (ui.AbsoluteSize.X / 2)
    local y = ui.AbsolutePosition.Y + (ui.AbsoluteSize.Y / 2)
    VIM:SendMouseButtonEvent(x, y, 0, true, game, 0)
    debug("Mouse button down on UI element at position X:" .. x .. " Y:" .. y)
end

function VI.Up(ui)
    if not ui then
        debug("Cannot release UI - UI element is nil")
        return
    end
    
    VI.State = false
    local x = ui.AbsolutePosition.X + (ui.AbsoluteSize.X / 2)
    local y = ui.AbsolutePosition.Y + (ui.AbsoluteSize.Y / 2)
    VIM:SendMouseButtonEvent(x, y, 0, false, game, 0)
    debug("Mouse button up on UI element at position X:" .. x .. " Y:" .. y)
end

--API
function FischAPI.TapShake()
    debug("Attempting to tap shake")
    local shakeUI = player.PlayerGui:FindFirstChild("shakeui")
    if shakeUI and shakeUI.Enabled then
        local safezone = shakeUI:FindFirstChild("safezone")
        if safezone then
            local button = safezone:FindFirstChild("button")
            if button and button:IsA("ImageButton") and button.Visible then
                if Options.AutoShake then
                    local pos = button.AbsolutePosition
                    local size = button.AbsoluteSize
                    VIM:SendMouseButtonEvent(pos.X + size.X / 2, pos.Y + size.Y / 2, 0, true, game, 0)
                    VIM:SendMouseButtonEvent(pos.X + size.X / 2, pos.Y + size.Y / 2, 0, false, game, 0)
                    debug("Auto shake (click) executed")
                elseif Options.AutoShake2 then
                    pcall(function()
                        GuiService.SelectedObject = button
                        VIM:SendKeyEvent(true, Enum.KeyCode.Return, false, game)
                        VIM:SendKeyEvent(false, Enum.KeyCode.Return, false, game)
                        debug("Auto shake (enter) executed")
                    end)
                end
            else
                debug("Shake button not found or not visible")
            end
        else
            debug("Safezone not found in shakeUI")
        end
    else
        debug("ShakeUI not found or not enabled")
    end
end

function FischAPI.InstantReel()
    debug("Attempting instant reel")
    pcall(function()
        ReplicatedStorage.events.reelfinished:FireServer(100, true)
        debug("Instant reel executed")
    end)
end

function FischAPI.Cast()
    debug("Attempting to cast fishing rod")
    local character = player.Character

    if character then
        -- Find the equipped fishing rod
        local tool = character:FindFirstChildOfClass("Tool")

        if tool then
            -- Check if the tool is already casting (has a bobber)
            local hasBobber = tool:FindFirstChild("bobber")

            if not hasBobber then
                -- Get the cast event
                local castEvent = tool:FindFirstChild("events") and tool.events:FindFirstChild("cast")

                if castEvent then
                    -- Generate a random power between 90-99
                    local power = math.random(90, 99)
                    
                    -- Cast with the random power
                    castEvent:FireServer(power, 1)
                    debug("Cast executed with power: " .. power)
                    
                    -- Ensure the character is not anchored
                    local humanoidRootPart = character:FindFirstChild("HumanoidRootPart")
                    if humanoidRootPart then
                        humanoidRootPart.Anchored = false
                    end
                else
                    debug("Cast event not found in tool")
                end
            else
                debug("Tool already has bobber, not casting")
            end
        else
            debug("No tool found in character")
        end
    else
        debug("Character not found")
    end
end

function FischAPI.GetAllAbundanceZones()
    debug("Getting all abundance zones")
    local Abundances = {}
    
    pcall(function()
        local zones = game:GetService("Workspace").zones
        if zones and zones:FindFirstChild("fishing") then
            for i, Zone in pairs(zones.fishing:GetChildren()) do
                local Info = {}
                if Zone:FindFirstChild("Abundance") then
                    if Zone.Abundance:FindFirstChild("Chance") then
                        Info.Chance = Zone.Abundance.Chance.Value
                    else
                        Info.Chance = 1
                    end
                    Info.Position = Zone.Position
                    if Abundances[Zone.Abundance.Value] == nil then
                        Abundances[Zone.Abundance.Value] = Info
                    elseif Abundances[Zone.Abundance.Value].Chance < Info.Chance then
                        Abundances[Zone.Abundance.Value] = Info
                    end
                end
            end
        else
            debug("Fishing zones not found")
        end
    end)
    
    return Abundances
end

function FischAPI.SellAll()
    debug("Attempting to sell all items")
    pcall(function()
        workspace.world.npcs["Marc Merchant"].merchant.sellall:InvokeServer()
        debug("Sell all command executed")
    end)
end

function FischAPI.AutoSellWithReturn()
    debug("Attempting auto sell with return")
    local character = player.Character or player.CharacterAdded:Wait()
    local rootPart = character:WaitForChild("HumanoidRootPart")
    local currentPosition = rootPart.CFrame
    local sellPosition = CFrame.new(464, 151, 232)
    
    -- Store whether lock was active
    local wasLockActive = false
    if Options.Lock then
        wasLockActive = true
        Options.Lock = false
        debug("Temporarily disabled position lock for selling")
    end

    -- Teleport to merchant
    rootPart.CFrame = sellPosition
    debug("Teleported to merchant")
    task.wait(0.5)

    -- Sell all items
    pcall(function()
        workspace:WaitForChild("world"):WaitForChild("npcs"):WaitForChild("Marc Merchant"):WaitForChild("merchant"):WaitForChild("sellall"):InvokeServer()
        debug("Sold all items")
    end)

    -- Wait and return to original position
    task.wait(1)
    rootPart.CFrame = currentPosition
    debug("Returned to original position")

    -- Restore lock if it was active
    if wasLockActive then
        Options.Lock = true
        debug("Re-enabled position lock")
    end
end

function FischAPI.GetFish()
    debug("Getting fish inventory")
    local Text = "Items/Fish:\n"
    
    pcall(function()
        for i, v in pairs(player.Backpack:GetChildren()) do
            Text = Text .. v.Name .. "\n"
        end
    end)
    
    return Text
end

--User
function FischUser.Sell()
    debug("Manual sell triggered")
    FischAPI.SellAll()
end

function FischUser.AutoShake()
    if Options.AutoShake3 then
        -- Fast mode - will be handled in FischUser.StepLoop
        debug("Fast auto shake mode active (handled in step loop)")
    else
        task.wait(Options.AutoShakeDelay)
        FischAPI.TapShake()
    end
end

function FischUser.OpenBoatUI()
    debug("Toggling boat UI")
    pcall(function()
        local hud = player.PlayerGui.hud
        if hud and hud:FindFirstChild("safezone") and hud.safezone:FindFirstChild("shipwright") then
            hud.safezone.shipwright.Visible = not hud.safezone.shipwright.Visible
            debug("Boat UI visibility set to: " .. tostring(hud.safezone.shipwright.Visible))
        else
            debug("Boat UI elements not found")
        end
    end)
end

function FischUser.LockPosition()
    if not player.Character or not player.Character:FindFirstChild("HumanoidRootPart") then
        debug("Cannot lock position - character or HumanoidRootPart not found")
        return
    end
    
    if Internal.Megaladon == true and Options.MegaladonHunting == true and Internal.MegHuntPos then
        player.Character.HumanoidRootPart.Position = Internal.MegHuntPos
        debug("Locked to Megaladon hunting position")
        return
    end
    
    if Internal.LockedPosition then
        player.Character.HumanoidRootPart.Position = Internal.LockedPosition
        debug("Locked to saved position")
    else
        debug("No locked position saved")
    end
end

function FischUser.FloatOnWater()
    debug("Creating float platform")
    
    pcall(function()
        if Internal.FloatPart then
            Internal.FloatPart:Destroy()
            debug("Removed old float platform")
        end
    end)
    
    if not player.Character or not player.Character:FindFirstChild("HumanoidRootPart") then
        debug("Cannot create float platform - character or HumanoidRootPart not found")
        return
    end
    
    Internal.FloatPart = Instance.new("Part", workspace)
    Internal.FloatPart.Anchored = true
    Internal.FloatPart.Size = Vector3.new(10, 1, 10)
    Internal.FloatPart.Position = Vector3.new(
        player.Character.HumanoidRootPart.Position.X, 
        133.77, 
        player.Character.HumanoidRootPart.Position.Z
    )
    debug("Created float platform at " .. tostring(Internal.FloatPart.Position))
    
    player.Character.HumanoidRootPart.Position = Vector3.new(
        player.Character.HumanoidRootPart.Position.X, 
        150, 
        player.Character.HumanoidRootPart.Position.Z
    )
    debug("Moved player above water to " .. tostring(player.Character.HumanoidRootPart.Position))
end

function FischUser.AutoReel()
    debug("Auto reel triggered")
    FischAPI.InstantReel()
end

function FischUser.SecondUpdateWebhook()
    debug("Webhook update check")
    
    local success, err = pcall(function()
        Internal.Timer = Internal.Timer + 1
        if Internal.Timer >= 300 then
            Internal.Timer = 0
            local Data = FischAPI.GetFish()
            
            if Options.WebhookURL and Options.WebhookURL ~= "" then
                Utils.SendWebhookData(Options.WebhookURL, Data)
                Notification:Notify(
                    "info",
                    "Webhook Notification Sent",
                    "The next webhook notification is in 5 minutes.",
                    5
                )
                debug("Webhook notification sent")
            else
                debug("Webhook URL not set, skipping notification")
            end
        end
    end)
    
    if not success then
        debug("Error in webhook update: " .. tostring(err))
    end
end

function FischUser.AutoCast()
    debug("Auto cast triggered")
    FischAPI.Cast()
end

function FischUser.AutoSellLoop()
    if Options.AutoSell then
        debug("Auto sell loop triggered")
        FischAPI.AutoSellWithReturn()
    end
end

function FischUser.StepLoop()
    pcall(function()
        if Options.FloatOnWater == true then
            FischUser.FloatOnWater()
        end
        
        -- Handle auto shake based on mode
        if Options.AutoShake3 and (Options.AutoShake or Options.AutoShake2) then
            FischAPI.TapShake()
        elseif (Options.AutoShake or Options.AutoShake2) then
            FischUser.AutoShake()
        end
        
        if Options.AutoMinigameBlatant == true then
            FischUser.AutoReel()
        end
    end)
end

function FischUser.MegaladonHuntInstant()
    if Internal.Megaladon == true then
        debug("Megaladon hunting active")
        
        if Internal.MegHuntPlat then
            debug("Already have Megaladon hunting platform")
            return
        end
        
        if not player.Character or not player.Character:FindFirstChild("HumanoidRootPart") then
            debug("Cannot hunt Megaladon - character or HumanoidRootPart not found")
            return
        end
        
        if not Internal.MegaladonPosition then
            debug("Cannot hunt Megaladon - position unknown")
            return
        }
        
        player.Character.HumanoidRootPart.Position = Vector3.new(Internal.MegaladonPosition.X, 150.77, Internal.MegaladonPosition.Z)
        debug("Teleported to Megaladon position")
        
        Internal.MegHuntPlat = Instance.new("Part", workspace)
        Internal.MegHuntPlat.Anchored = true
        Internal.MegHuntPlat.Size = Vector3.new(10, 1, 10)
        Internal.MegHuntPlat.Position = Vector3.new(
            player.Character.HumanoidRootPart.Position.X, 
            133.77, 
            player.Character.HumanoidRootPart.Position.Z
        )
        debug("Created Megaladon hunting platform")
        
        player.Character.HumanoidRootPart.Position = Vector3.new(
            player.Character.HumanoidRootPart.Position.X, 
            150, 
            player.Character.HumanoidRootPart.Position.Z
        )
        debug("Positioned player for Megaladon hunting")
        
        task.wait(5)
        Internal.MegHuntPos = player.Character.HumanoidRootPart.Position
        debug("Saved Megaladon hunting position")
    end
end

function FischUser.Heartbeat()
    if Options.MegaladonHunting == true then
        pcall(function()
            FischUser.MegaladonHuntInstant()
        end)
    end
    
    if Options.Lock == true and Internal.LockedPosition then
        pcall(function()
            FischUser.LockPosition()
        end)
    end
end
FischUser.Initialize()
UI.Initialize()

return FischAPI
